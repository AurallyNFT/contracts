/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "update_commission_percentage(uint8)uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_aura_rewards()(uint64,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyVals",
          "elements": [
            [
              "reward_base",
              "uint64"
            ],
            [
              "reward",
              "uint64"
            ],
            [
              "difficulty",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_target_nft_transactions(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_profits(uint64,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_min_charge_price(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_aura_tokens()(uint64,string,uint64,bool)": {
      "structs": {
        "output": {
          "name": "AurallyToken",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "asset_total",
              "uint64"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_aura_percentage(account)(uint64,string,uint64,bool)": {
      "structs": {
        "output": {
          "name": "AurallyToken",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "asset_total",
              "uint64"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_creator(txn)(address,uint64,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyCreative",
          "elements": [
            [
              "address",
              "address"
            ],
            [
              "minted",
              "uint64"
            ],
            [
              "d_nft_id",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)": {
      "structs": {
        "output": {
          "name": "SoundNft",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "label",
              "string"
            ],
            [
              "artist",
              "string"
            ],
            [
              "release_date",
              "uint64"
            ],
            [
              "genre",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "cover_image_url",
              "string"
            ],
            [
              "creator",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
      "structs": {
        "output": {
          "name": "ArtNft",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ],
            [
              "on_auction",
              "bool"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
      "structs": {
        "output": {
          "name": "ArtNft",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ],
            [
              "on_auction",
              "bool"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auction_key",
              "string"
            ],
            [
              "auctioneer",
              "address"
            ],
            [
              "item_asset_key",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ],
            [
              "closed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auction_key",
              "string"
            ],
            [
              "auctioneer",
              "address"
            ],
            [
              "item_asset_key",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ],
            [
              "closed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
      "structs": {
        "output": {
          "name": "ArtNft",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ],
            [
              "on_auction",
              "bool"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
      "structs": {
        "output": {
          "name": "ArtNft",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "description",
              "string"
            ],
            [
              "image_url",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "creator",
              "address"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ],
            [
              "on_auction",
              "bool"
            ],
            [
              "claimed",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "aura_base_reward": {
          "type": "uint64",
          "key": "aura_base_reward",
          "descr": ""
        },
        "aura_reward": {
          "type": "uint64",
          "key": "aura_reward",
          "descr": ""
        },
        "commission_percentage": {
          "type": "uint64",
          "key": "commission_percentage",
          "descr": ""
        },
        "epoch_nft_transactions": {
          "type": "uint64",
          "key": "epoch_nft_transactions",
          "descr": ""
        },
        "epoch_target_transaction": {
          "type": "uint64",
          "key": "epoch_target_transaction",
          "descr": ""
        },
        "min_aural_reward": {
          "type": "uint64",
          "key": "min_aural_reward",
          "descr": ""
        },
        "min_charge_price": {
          "type": "uint64",
          "key": "min_charge_price",
          "descr": ""
        },
        "min_difficulty": {
          "type": "uint64",
          "key": "min_difficulty",
          "descr": ""
        },
        "network_difficulty": {
          "type": "uint64",
          "key": "network_difficulty",
          "descr": ""
        },
        "rewardable_tokens_supply": {
          "type": "uint64",
          "key": "rewardable_tokens_supply",
          "descr": ""
        },
        "total_aurally_tokens": {
          "type": "uint64",
          "key": "total_aurally_tokens",
          "descr": ""
        },
        "total_nft_transactions": {
          "type": "uint64",
          "key": "total_nft_transactions",
          "descr": ""
        },
        "total_target_nft_sales": {
          "type": "uint64",
          "key": "total_target_nft_sales",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Aurally_NFT",
    "methods": [
      {
        "name": "update_commission_percentage",
        "args": [
          {
            "type": "uint8",
            "name": "amt"
          }
        ],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "update_aura_rewards",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64)"
        }
      },
      {
        "name": "update_target_nft_transactions",
        "args": [
          {
            "type": "uint64",
            "name": "target"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "withdraw_profits",
        "args": [
          {
            "type": "uint64",
            "name": "amt"
          },
          {
            "type": "account",
            "name": "to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update_min_charge_price",
        "args": [
          {
            "type": "uint64",
            "name": "price"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_aura_tokens",
        "args": [],
        "returns": {
          "type": "(uint64,string,uint64,bool)"
        }
      },
      {
        "name": "claim_aura_percentage",
        "args": [
          {
            "type": "account",
            "name": "percent_receiver"
          }
        ],
        "returns": {
          "type": "(uint64,string,uint64,bool)"
        }
      },
      {
        "name": "register_creator",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64)"
        }
      },
      {
        "name": "create_sound_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "label"
          },
          {
            "type": "string",
            "name": "artist"
          },
          {
            "type": "uint64",
            "name": "release_date"
          },
          {
            "type": "string",
            "name": "genre"
          },
          {
            "type": "string",
            "name": "description"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "string",
            "name": "cover_image_url"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)"
        }
      },
      {
        "name": "create_art_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "string",
            "name": "description"
          },
          {
            "type": "string",
            "name": "image_url"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
        }
      },
      {
        "name": "claim_created_art",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "account",
            "name": "receiver"
          },
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
        }
      },
      {
        "name": "create_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "uint64",
            "name": "min_bid"
          },
          {
            "type": "uint64",
            "name": "starts_at"
          },
          {
            "type": "uint64",
            "name": "ends_at"
          },
          {
            "type": "string",
            "name": "description"
          }
        ],
        "returns": {
          "type": "(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
        }
      },
      {
        "name": "bid_on_art_auction",
        "args": [
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "account",
            "name": "current_highest_bidder"
          },
          {
            "type": "axfer",
            "name": "optin_txn"
          },
          {
            "type": "axfer",
            "name": "aura_optin_txn"
          }
        ],
        "returns": {
          "type": "(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
        }
      },
      {
        "name": "complete_art_auction",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "account",
            "name": "auctioneer_account"
          },
          {
            "type": "account",
            "name": "highest_bidder_account"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
        }
      },
      {
        "name": "place_art_on_sale",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "uint64",
            "name": "sale_price"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
        }
      },
      {
        "name": "purchase_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "axfer",
            "name": "optin_txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "asset_type"
          },
          {
            "type": "account",
            "name": "buyer"
          },
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "account",
            "name": "seller_account"
          },
          {
            "type": "axfer",
            "name": "aura_optin_txn"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the AurallyNft smart contract.
 */
export type AurallyNft = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
  & Record<'update_commission_percentage(uint8)uint8' | 'update_commission_percentage', {
    argsObj: {
      amt: number
    }
    argsTuple: [amt: number]
    returns: number
  }>
  & Record<'update_aura_rewards()(uint64,uint64,uint64)' | 'update_aura_rewards', {
    argsObj: {
    }
    argsTuple: []
    returns: AurallyVals
  }>
  & Record<'update_target_nft_transactions(uint64)uint64' | 'update_target_nft_transactions', {
    argsObj: {
      target: bigint | number
    }
    argsTuple: [target: bigint | number]
    returns: bigint
  }>
  & Record<'withdraw_profits(uint64,account)void' | 'withdraw_profits', {
    argsObj: {
      amt: bigint | number
      to: string | Uint8Array
    }
    argsTuple: [amt: bigint | number, to: string | Uint8Array]
    returns: void
  }>
  & Record<'update_min_charge_price(uint64)void' | 'update_min_charge_price', {
    argsObj: {
      price: bigint | number
    }
    argsTuple: [price: bigint | number]
    returns: void
  }>
  & Record<'create_aura_tokens()(uint64,string,uint64,bool)' | 'create_aura_tokens', {
    argsObj: {
    }
    argsTuple: []
    returns: AurallyToken
  }>
  & Record<'claim_aura_percentage(account)(uint64,string,uint64,bool)' | 'claim_aura_percentage', {
    argsObj: {
      percent_receiver: string | Uint8Array
    }
    argsTuple: [percent_receiver: string | Uint8Array]
    returns: AurallyToken
  }>
  & Record<'register_creator(txn)(address,uint64,uint64)' | 'register_creator', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: AurallyCreative
  }>
  & Record<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)' | 'create_sound_nft', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      nft_name: string
      asset_key: string
      title: string
      label: string
      artist: string
      release_date: bigint | number
      genre: string
      description: string
      price: bigint | number
      cover_image_url: string
      supply: bigint | number
      aura: number | bigint
      creator: string | Uint8Array
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft_name: string, asset_key: string, title: string, label: string, artist: string, release_date: bigint | number, genre: string, description: string, price: bigint | number, cover_image_url: string, supply: bigint | number, aura: number | bigint, creator: string | Uint8Array]
    returns: SoundNft
  }>
  & Record<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' | 'create_art_nft', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      asset_key: string
      nft_name: string
      title: string
      name: string
      description: string
      image_url: string
      price: bigint | number
      aura: number | bigint
      creator: string | Uint8Array
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, nft_name: string, title: string, name: string, description: string, image_url: string, price: bigint | number, aura: number | bigint, creator: string | Uint8Array]
    returns: ArtNft
  }>
  & Record<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' | 'claim_created_art', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      asset_key: string
      receiver: string | Uint8Array
      asset: number | bigint
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, receiver: string | Uint8Array, asset: number | bigint]
    returns: ArtNft
  }>
  & Record<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)' | 'create_art_auction', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      auction_key: string
      asset_key: string
      min_bid: bigint | number
      starts_at: bigint | number
      ends_at: bigint | number
      description: string
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string, asset_key: string, min_bid: bigint | number, starts_at: bigint | number, ends_at: bigint | number, description: string]
    returns: ArtAuctionItem
  }>
  & Record<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)' | 'bid_on_art_auction', {
    argsObj: {
      auction_key: string
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      current_highest_bidder: string | Uint8Array
      optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [auction_key: string, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, current_highest_bidder: string | Uint8Array, optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: ArtAuctionItem
  }>
  & Record<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' | 'complete_art_auction', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      aura: number | bigint
      auction_key: string
      auctioneer_account: string | Uint8Array
      highest_bidder_account: string | Uint8Array
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, aura: number | bigint, auction_key: string, auctioneer_account: string | Uint8Array, highest_bidder_account: string | Uint8Array]
    returns: ArtNft
  }>
  & Record<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' | 'place_art_on_sale', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      asset_key: string
      sale_price: bigint | number
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, sale_price: bigint | number]
    returns: ArtNft
  }>
  & Record<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void' | 'purchase_nft', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      asset_key: string
      asset_type: string
      buyer: string | Uint8Array
      asset: number | bigint
      aura: number | bigint
      seller_account: string | Uint8Array
      aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, asset_type: string, buyer: string | Uint8Array, asset: number | bigint, aura: number | bigint, seller_account: string | Uint8Array, aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: void
  }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'aura_base_reward'?: IntegerState
      'aura_reward'?: IntegerState
      'commission_percentage'?: IntegerState
      'epoch_nft_transactions'?: IntegerState
      'epoch_target_transaction'?: IntegerState
      'min_aural_reward'?: IntegerState
      'min_charge_price'?: IntegerState
      'min_difficulty'?: IntegerState
      'network_difficulty'?: IntegerState
      'rewardable_tokens_supply'?: IntegerState
      'total_aurally_tokens'?: IntegerState
      'total_nft_transactions'?: IntegerState
      'total_target_nft_sales'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AurallyNftSig = keyof AurallyNft['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AurallyNftSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a AurallyVals result as a struct
 */
export type AurallyVals = {
  reward_base: bigint
  reward: bigint
  difficulty: bigint
}
/**
 * Converts the tuple representation of a AurallyVals to the struct representation
 */
export function AurallyVals([reward_base, reward, difficulty]: [bigint, bigint, bigint]) {
  return {
    reward_base,
    reward,
    difficulty,
  }
}
/**
 * Represents a AurallyToken result as a struct
 */
export type AurallyToken = {
  asset_id: bigint
  asset_key: string
  asset_total: bigint
  claimed: boolean
}
/**
 * Converts the tuple representation of a AurallyToken to the struct representation
 */
export function AurallyToken([asset_id, asset_key, asset_total, claimed]: [bigint, string, bigint, boolean]) {
  return {
    asset_id,
    asset_key,
    asset_total,
    claimed,
  }
}
/**
 * Represents a AurallyCreative result as a struct
 */
export type AurallyCreative = {
  address: string
  minted: bigint
  d_nft_id: bigint
}
/**
 * Converts the tuple representation of a AurallyCreative to the struct representation
 */
export function AurallyCreative([address, minted, d_nft_id]: [string, bigint, bigint]) {
  return {
    address,
    minted,
    d_nft_id,
  }
}
/**
 * Represents a SoundNft result as a struct
 */
export type SoundNft = {
  asset_id: bigint
  asset_key: string
  supply: bigint
  title: string
  label: string
  artist: string
  release_date: bigint
  genre: string
  description: string
  price: bigint
  cover_image_url: string
  creator: string
  for_sale: boolean
  claimed: boolean
}
/**
 * Converts the tuple representation of a SoundNft to the struct representation
 */
export function SoundNft([asset_id, asset_key, supply, title, label, artist, release_date, genre, description, price, cover_image_url, creator, for_sale, claimed]: [bigint, string, bigint, string, string, string, bigint, string, string, bigint, string, string, boolean, boolean]) {
  return {
    asset_id,
    asset_key,
    supply,
    title,
    label,
    artist,
    release_date,
    genre,
    description,
    price,
    cover_image_url,
    creator,
    for_sale,
    claimed,
  }
}
/**
 * Represents a ArtAuctionItem result as a struct
 */
export type ArtAuctionItem = {
  auction_key: string
  auctioneer: string
  item_asset_key: string
  item_name: string
  min_bid: bigint
  starts_at: bigint
  ends_at: bigint
  description: string
  highest_bid: bigint
  highest_bidder: string
  closed: boolean
}
/**
 * Converts the tuple representation of a ArtAuctionItem to the struct representation
 */
export function ArtAuctionItem([auction_key, auctioneer, item_asset_key, item_name, min_bid, starts_at, ends_at, description, highest_bid, highest_bidder, closed]: [string, string, string, string, bigint, bigint, bigint, string, bigint, string, boolean]) {
  return {
    auction_key,
    auctioneer,
    item_asset_key,
    item_name,
    min_bid,
    starts_at,
    ends_at,
    description,
    highest_bid,
    highest_bidder,
    closed,
  }
}
/**
 * Represents a ArtNft result as a struct
 */
export type ArtNft = {
  asset_id: bigint
  asset_key: string
  title: string
  name: string
  description: string
  image_url: string
  price: bigint
  sold_price: bigint
  creator: string
  owner: string
  for_sale: boolean
  on_auction: boolean
  claimed: boolean
}
/**
 * Converts the tuple representation of a ArtNft to the struct representation
 */
export function ArtNft([asset_id, asset_key, title, name, description, image_url, price, sold_price, creator, owner, for_sale, on_auction, claimed]: [bigint, string, string, string, string, string, bigint, bigint, string, string, boolean, boolean, boolean]) {
  return {
    asset_id,
    asset_key,
    title,
    name,
    description,
    image_url,
    price,
    sold_price,
    creator,
    owner,
    for_sale,
    on_auction,
    claimed,
  }
}
/**
 * Maps a method signature from the AurallyNft smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AurallyNftSig> = AurallyNft['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AurallyNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AurallyNftSig> = AurallyNft['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AurallyNftCreateCalls = (typeof AurallyNftCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AurallyNftCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AurallyNftUpdateCalls = (typeof AurallyNftCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AurallyNftUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AurallyNftDeleteCalls = (typeof AurallyNftCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AurallyNftDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type AurallyNftDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AurallyNftCreateCalls) => AurallyNftCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AurallyNftUpdateCalls) => AurallyNftUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AurallyNftDeleteCalls) => AurallyNftDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AurallyNftCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Aurally_NFT smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Aurally_NFT smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Aurally_NFT smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the update_commission_percentage(uint8)uint8 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateCommissionPercentage(args: MethodArgs<'update_commission_percentage(uint8)uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_commission_percentage(uint8)uint8' as const,
      methodArgs: Array.isArray(args) ? args : [args.amt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_aura_rewards()(uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAuraRewards(args: MethodArgs<'update_aura_rewards()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_aura_rewards()(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_target_nft_transactions(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTargetNftTransactions(args: MethodArgs<'update_target_nft_transactions(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_target_nft_transactions(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.target],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_profits(uint64,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawProfits(args: MethodArgs<'withdraw_profits(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_profits(uint64,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amt, args.to],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_min_charge_price(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateMinChargePrice(args: MethodArgs<'update_min_charge_price(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_min_charge_price(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_aura_tokens()(uint64,string,uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_aura_tokens()(uint64,string,uint64,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_aura_percentage(account)(uint64,string,uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimAuraPercentage(args: MethodArgs<'claim_aura_percentage(account)(uint64,string,uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_aura_percentage(account)(uint64,string,uint64,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.percent_receiver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_creator(txn)(address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerCreator(args: MethodArgs<'register_creator(txn)(address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_creator(txn)(address,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSoundNft(args: MethodArgs<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.nft_name, args.asset_key, args.title, args.label, args.artist, args.release_date, args.genre, args.description, args.price, args.cover_image_url, args.supply, args.aura, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset_key, args.nft_name, args.title, args.name, args.description, args.image_url, args.price, args.aura, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimCreatedArt(args: MethodArgs<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset_key, args.receiver, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key, args.asset_key, args.min_bid, args.starts_at, args.ends_at, args.description],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.auction_key, args.txn, args.current_highest_bidder, args.optin_txn, args.aura_optin_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeArtAuction(args: MethodArgs<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.aura, args.auction_key, args.auctioneer_account, args.highest_bidder_account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static placeArtOnSale(args: MethodArgs<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset_key, args.sale_price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.optin_txn, args.asset_key, args.asset_type, args.buyer, args.asset, args.aura, args.seller_account, args.aura_optin_txn],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Aurally_NFT smart contract
 */
export class AurallyNftClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AurallyNftClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AurallyNft['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Aurally_NFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AurallyNftDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AurallyNftCallFactory.create)
    const updateArgs = params.updateCall?.(AurallyNftCallFactory.update)
    const deleteArgs = params.deleteCall?.(AurallyNftCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Aurally_NFT smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Aurally_NFT smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Aurally_NFT smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally_NFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the update_commission_percentage(uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateCommissionPercentage(args: MethodArgs<'update_commission_percentage(uint8)uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.updateCommissionPercentage(args, params))
  }

  /**
   * Calls the update_aura_rewards()(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAuraRewards(args: MethodArgs<'update_aura_rewards()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.updateAuraRewards(args, params), AurallyVals)
  }

  /**
   * Calls the update_target_nft_transactions(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTargetNftTransactions(args: MethodArgs<'update_target_nft_transactions(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.updateTargetNftTransactions(args, params))
  }

  /**
   * Calls the withdraw_profits(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawProfits(args: MethodArgs<'withdraw_profits(uint64,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.withdrawProfits(args, params))
  }

  /**
   * Calls the update_min_charge_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateMinChargePrice(args: MethodArgs<'update_min_charge_price(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.updateMinChargePrice(args, params))
  }

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.createAuraTokens(args, params), AurallyToken)
  }

  /**
   * Calls the claim_aura_percentage(account)(uint64,string,uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimAuraPercentage(args: MethodArgs<'claim_aura_percentage(account)(uint64,string,uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.claimAuraPercentage(args, params), AurallyToken)
  }

  /**
   * Calls the register_creator(txn)(address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerCreator(args: MethodArgs<'register_creator(txn)(address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.registerCreator(args, params), AurallyCreative)
  }

  /**
   * Calls the create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSoundNft(args: MethodArgs<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.createSoundNft(args, params), SoundNft)
  }

  /**
   * Calls the create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.createArtNft(args, params), ArtNft)
  }

  /**
   * Calls the claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimCreatedArt(args: MethodArgs<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.claimCreatedArt(args, params), ArtNft)
  }

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.createArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.bidOnArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeArtAuction(args: MethodArgs<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.completeArtAuction(args, params), ArtNft)
  }

  /**
   * Calls the place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public placeArtOnSale(args: MethodArgs<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.placeArtOnSale(args, params), ArtNft)
  }

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyNftCallFactory.purchaseNft(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AurallyNft['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get aura_base_reward() {
        return AurallyNftClient.getIntegerState(state, 'aura_base_reward')
      },
      get aura_reward() {
        return AurallyNftClient.getIntegerState(state, 'aura_reward')
      },
      get commission_percentage() {
        return AurallyNftClient.getIntegerState(state, 'commission_percentage')
      },
      get epoch_nft_transactions() {
        return AurallyNftClient.getIntegerState(state, 'epoch_nft_transactions')
      },
      get epoch_target_transaction() {
        return AurallyNftClient.getIntegerState(state, 'epoch_target_transaction')
      },
      get min_aural_reward() {
        return AurallyNftClient.getIntegerState(state, 'min_aural_reward')
      },
      get min_charge_price() {
        return AurallyNftClient.getIntegerState(state, 'min_charge_price')
      },
      get min_difficulty() {
        return AurallyNftClient.getIntegerState(state, 'min_difficulty')
      },
      get network_difficulty() {
        return AurallyNftClient.getIntegerState(state, 'network_difficulty')
      },
      get rewardable_tokens_supply() {
        return AurallyNftClient.getIntegerState(state, 'rewardable_tokens_supply')
      },
      get total_aurally_tokens() {
        return AurallyNftClient.getIntegerState(state, 'total_aurally_tokens')
      },
      get total_nft_transactions() {
        return AurallyNftClient.getIntegerState(state, 'total_nft_transactions')
      },
      get total_target_nft_sales() {
        return AurallyNftClient.getIntegerState(state, 'total_target_nft_sales')
      },
    }
  }

  public compose(): AurallyNftComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      updateCommissionPercentage(args: MethodArgs<'update_commission_percentage(uint8)uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateCommissionPercentage(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      updateAuraRewards(args: MethodArgs<'update_aura_rewards()(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAuraRewards(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(AurallyVals)
        return this
      },
      updateTargetNftTransactions(args: MethodArgs<'update_target_nft_transactions(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTargetNftTransactions(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      withdrawProfits(args: MethodArgs<'withdraw_profits(uint64,account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawProfits(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      updateMinChargePrice(args: MethodArgs<'update_min_charge_price(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateMinChargePrice(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAuraTokens(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(AurallyToken)
        return this
      },
      claimAuraPercentage(args: MethodArgs<'claim_aura_percentage(account)(uint64,string,uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimAuraPercentage(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(AurallyToken)
        return this
      },
      registerCreator(args: MethodArgs<'register_creator(txn)(address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerCreator(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(AurallyCreative)
        return this
      },
      createSoundNft(args: MethodArgs<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSoundNft(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(SoundNft)
        return this
      },
      createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtNft(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtNft)
        return this
      },
      claimCreatedArt(args: MethodArgs<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimCreatedArt(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtNft)
        return this
      },
      createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtAuction(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bidOnArtAuction(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      completeArtAuction(args: MethodArgs<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.completeArtAuction(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtNft)
        return this
      },
      placeArtOnSale(args: MethodArgs<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.placeArtOnSale(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ArtNft)
        return this
      },
      purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseNft(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AurallyNftComposer
  }
}
export type AurallyNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the update_commission_percentage(uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCommissionPercentage(args: MethodArgs<'update_commission_percentage(uint8)uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'update_commission_percentage(uint8)uint8'>]>

  /**
   * Calls the update_aura_rewards()(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAuraRewards(args: MethodArgs<'update_aura_rewards()(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'update_aura_rewards()(uint64,uint64,uint64)'>]>

  /**
   * Calls the update_target_nft_transactions(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTargetNftTransactions(args: MethodArgs<'update_target_nft_transactions(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'update_target_nft_transactions(uint64)uint64'>]>

  /**
   * Calls the withdraw_profits(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawProfits(args: MethodArgs<'withdraw_profits(uint64,account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'withdraw_profits(uint64,account)void'>]>

  /**
   * Calls the update_min_charge_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinChargePrice(args: MethodArgs<'update_min_charge_price(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'update_min_charge_price(uint64)void'>]>

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'create_aura_tokens()(uint64,string,uint64,bool)'>]>

  /**
   * Calls the claim_aura_percentage(account)(uint64,string,uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimAuraPercentage(args: MethodArgs<'claim_aura_percentage(account)(uint64,string,uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'claim_aura_percentage(account)(uint64,string,uint64,bool)'>]>

  /**
   * Calls the register_creator(txn)(address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerCreator(args: MethodArgs<'register_creator(txn)(address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'register_creator(txn)(address,uint64,uint64)'>]>

  /**
   * Calls the create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSoundNft(args: MethodArgs<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)'>]>

  /**
   * Calls the create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>]>

  /**
   * Calls the claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimCreatedArt(args: MethodArgs<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>]>

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>]>

  /**
   * Calls the bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)'>]>

  /**
   * Calls the complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeArtAuction(args: MethodArgs<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>]>

  /**
   * Calls the place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  placeArtOnSale(args: MethodArgs<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)'>]>

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, MethodReturn<'purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Aurally_NFT smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Aurally_NFT smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally_NFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AurallyNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AurallyNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AurallyNftComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AurallyNftComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AurallyNftComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AurallyNftComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
