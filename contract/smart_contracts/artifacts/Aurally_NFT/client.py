# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "update()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "promote_to_admin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reward_with_aura_tokens(txn,account,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_commission_percentage(uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_aura_rewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_target_nft_transactions(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_profits(uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_min_charge_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_aura_tokens()(uint64,string,uint64,bool)": {
            "structs": {
                "output": {
                    "name": "AurallyToken",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "asset_total",
                            "uint64"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_aura_percentage(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "register_creator(txn)(address,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "AurallyCreative",
                    "elements": [
                        [
                            "address",
                            "address"
                        ],
                        [
                            "minted",
                            "uint64"
                        ],
                        [
                            "d_nft_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)": {
            "structs": {
                "output": {
                    "name": "SoundNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "label",
                            "string"
                        ],
                        [
                            "artist",
                            "string"
                        ],
                        [
                            "release_date",
                            "uint64"
                        ],
                        [
                            "genre",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "cover_image_url",
                            "string"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ],
                        [
                            "on_auction",
                            "bool"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ],
                        [
                            "on_auction",
                            "bool"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auction_key",
                            "string"
                        ],
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_asset_key",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ],
                        [
                            "closed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auction_key",
                            "string"
                        ],
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_asset_key",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ],
                        [
                            "closed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ],
                        [
                            "on_auction",
                            "bool"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ],
                        [
                            "on_auction",
                            "bool"
                        ],
                        [
                            "claimed",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 13
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "aura_base_reward": {
                    "type": "uint64",
                    "key": "aura_base_reward",
                    "descr": ""
                },
                "aura_reward": {
                    "type": "uint64",
                    "key": "aura_reward",
                    "descr": ""
                },
                "commission_percentage": {
                    "type": "uint64",
                    "key": "commission_percentage",
                    "descr": ""
                },
                "contract_admin": {
                    "type": "bytes",
                    "key": "contract_admin",
                    "descr": ""
                },
                "epoch_nft_transactions": {
                    "type": "uint64",
                    "key": "epoch_nft_transactions",
                    "descr": ""
                },
                "epoch_target_transaction": {
                    "type": "uint64",
                    "key": "epoch_target_transaction",
                    "descr": ""
                },
                "min_aural_reward": {
                    "type": "uint64",
                    "key": "min_aural_reward",
                    "descr": ""
                },
                "min_charge_price": {
                    "type": "uint64",
                    "key": "min_charge_price",
                    "descr": ""
                },
                "min_difficulty": {
                    "type": "uint64",
                    "key": "min_difficulty",
                    "descr": ""
                },
                "network_difficulty": {
                    "type": "uint64",
                    "key": "network_difficulty",
                    "descr": ""
                },
                "rewardable_tokens_supply": {
                    "type": "uint64",
                    "key": "rewardable_tokens_supply",
                    "descr": ""
                },
                "total_aurally_tokens": {
                    "type": "uint64",
                    "key": "total_aurally_tokens",
                    "descr": ""
                },
                "total_nft_transactions": {
                    "type": "uint64",
                    "key": "total_nft_transactions",
                    "descr": ""
                },
                "total_target_nft_sales": {
                    "type": "uint64",
                    "key": "total_target_nft_sales",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Aurally_NFT",
        "methods": [
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "promote_to_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reward_with_aura_tokens",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "account",
                        "name": "receiver"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_commission_percentage",
                "args": [
                    {
                        "type": "uint8",
                        "name": "amt"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_aura_rewards",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_target_nft_transactions",
                "args": [
                    {
                        "type": "uint64",
                        "name": "target"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw_profits",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amt"
                    },
                    {
                        "type": "account",
                        "name": "to"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_min_charge_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_aura_tokens",
                "args": [],
                "returns": {
                    "type": "(uint64,string,uint64,bool)"
                }
            },
            {
                "name": "claim_aura_percentage",
                "args": [
                    {
                        "type": "account",
                        "name": "percent_receiver"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "register_creator",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,uint64)"
                }
            },
            {
                "name": "create_sound_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "nft_name"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "label"
                    },
                    {
                        "type": "string",
                        "name": "artist"
                    },
                    {
                        "type": "uint64",
                        "name": "release_date"
                    },
                    {
                        "type": "string",
                        "name": "genre"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "string",
                        "name": "cover_image_url"
                    },
                    {
                        "type": "uint64",
                        "name": "supply"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "account",
                        "name": "creator"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)"
                }
            },
            {
                "name": "create_art_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_name"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    },
                    {
                        "type": "string",
                        "name": "image_url"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "account",
                        "name": "creator"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
                }
            },
            {
                "name": "claim_created_art",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "account",
                        "name": "receiver"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
                }
            },
            {
                "name": "create_art_auction",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "uint64",
                        "name": "min_bid"
                    },
                    {
                        "type": "uint64",
                        "name": "starts_at"
                    },
                    {
                        "type": "uint64",
                        "name": "ends_at"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    }
                ],
                "returns": {
                    "type": "(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
                }
            },
            {
                "name": "bid_on_art_auction",
                "args": [
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "account",
                        "name": "current_highest_bidder"
                    },
                    {
                        "type": "axfer",
                        "name": "optin_txn"
                    },
                    {
                        "type": "axfer",
                        "name": "aura_optin_txn"
                    }
                ],
                "returns": {
                    "type": "(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
                }
            },
            {
                "name": "complete_art_auction",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "account",
                        "name": "auctioneer_account"
                    },
                    {
                        "type": "account",
                        "name": "highest_bidder_account"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
                }
            },
            {
                "name": "place_art_on_sale",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "uint64",
                        "name": "sale_price"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
                }
            },
            {
                "name": "purchase_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "axfer",
                        "name": "optin_txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "asset_type"
                    },
                    {
                        "type": "account",
                        "name": "buyer"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "account",
                        "name": "seller_account"
                    },
                    {
                        "type": "axfer",
                        "name": "aura_optin_txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class PromoteToAdminArgs(_ArgsBase[None]):
    address: str

    @staticmethod
    def method() -> str:
        return "promote_to_admin(address)void"


@dataclasses.dataclass(kw_only=True)
class RewardWithAuraTokensArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    receiver: str | bytes
    aura: int

    @staticmethod
    def method() -> str:
        return "reward_with_aura_tokens(txn,account,asset)void"


@dataclasses.dataclass(kw_only=True)
class UpdateCommissionPercentageArgs(_ArgsBase[None]):
    amt: int

    @staticmethod
    def method() -> str:
        return "update_commission_percentage(uint8)void"


@dataclasses.dataclass(kw_only=True)
class UpdateAuraRewardsArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "update_aura_rewards()void"


@dataclasses.dataclass(kw_only=True)
class UpdateTargetNftTransactionsArgs(_ArgsBase[None]):
    target: int

    @staticmethod
    def method() -> str:
        return "update_target_nft_transactions(uint64)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawProfitsArgs(_ArgsBase[None]):
    amt: int
    to: str | bytes

    @staticmethod
    def method() -> str:
        return "withdraw_profits(uint64,account)void"


@dataclasses.dataclass(kw_only=True)
class UpdateMinChargePriceArgs(_ArgsBase[None]):
    price: int

    @staticmethod
    def method() -> str:
        return "update_min_charge_price(uint64)void"


@dataclasses.dataclass(kw_only=True)
class AurallyToken:
    asset_id: int
    asset_key: str
    asset_total: int
    claimed: bool


@dataclasses.dataclass(kw_only=True)
class CreateAuraTokensArgs(_ArgsBase[AurallyToken]):
    @staticmethod
    def method() -> str:
        return "create_aura_tokens()(uint64,string,uint64,bool)"


@dataclasses.dataclass(kw_only=True)
class ClaimAuraPercentageArgs(_ArgsBase[None]):
    percent_receiver: str | bytes

    @staticmethod
    def method() -> str:
        return "claim_aura_percentage(account)void"


@dataclasses.dataclass(kw_only=True)
class AurallyCreative:
    address: str
    minted: int
    d_nft_id: int


@dataclasses.dataclass(kw_only=True)
class RegisterCreatorArgs(_ArgsBase[AurallyCreative]):
    txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "register_creator(txn)(address,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class SoundNft:
    asset_id: int
    asset_key: str
    supply: int
    title: str
    label: str
    artist: str
    release_date: int
    genre: str
    description: str
    price: int
    cover_image_url: str
    creator: str
    for_sale: bool
    claimed: bool


@dataclasses.dataclass(kw_only=True)
class CreateSoundNftArgs(_ArgsBase[SoundNft]):
    txn: TransactionWithSigner
    nft_name: str
    asset_key: str
    title: str
    label: str
    artist: str
    release_date: int
    genre: str
    description: str
    price: int
    cover_image_url: str
    supply: int
    aura: int
    creator: str | bytes

    @staticmethod
    def method() -> str:
        return "create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtNft:
    asset_id: int
    asset_key: str
    title: str
    name: str
    description: str
    image_url: str
    price: int
    sold_price: int
    creator: str
    owner: str
    for_sale: bool
    on_auction: bool
    claimed: bool


@dataclasses.dataclass(kw_only=True)
class CreateArtNftArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    asset_key: str
    nft_name: str
    title: str
    name: str
    description: str
    image_url: str
    price: int
    aura: int
    creator: str | bytes

    @staticmethod
    def method() -> str:
        return "create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class ClaimCreatedArtArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    asset_key: str
    receiver: str | bytes
    asset: int

    @staticmethod
    def method() -> str:
        return "claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtAuctionItem:
    auction_key: str
    auctioneer: str
    item_asset_key: str
    item_name: str
    min_bid: int
    starts_at: int
    ends_at: int
    description: str
    highest_bid: int
    highest_bidder: str
    closed: bool


@dataclasses.dataclass(kw_only=True)
class CreateArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    txn: TransactionWithSigner
    auction_key: str
    asset_key: str
    min_bid: int
    starts_at: int
    ends_at: int
    description: str

    @staticmethod
    def method() -> str:
        return "create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class BidOnArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    auction_key: str
    txn: TransactionWithSigner
    current_highest_bidder: str | bytes
    optin_txn: TransactionWithSigner
    aura_optin_txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class CompleteArtAuctionArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    aura: int
    auction_key: str
    auctioneer_account: str | bytes
    highest_bidder_account: str | bytes

    @staticmethod
    def method() -> str:
        return "complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class PlaceArtOnSaleArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    asset_key: str
    sale_price: int

    @staticmethod
    def method() -> str:
        return "place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"


@dataclasses.dataclass(kw_only=True)
class PurchaseNftArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    optin_txn: TransactionWithSigner
    asset_key: str
    asset_type: str
    buyer: str | bytes
    asset: int
    aura: int
    seller_account: str | bytes
    aura_optin_txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void"


@dataclasses.dataclass(kw_only=True)
class UpdateArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "update()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.aura_base_reward = typing.cast(int, data.get(b"aura_base_reward"))
        self.aura_reward = typing.cast(int, data.get(b"aura_reward"))
        self.commission_percentage = typing.cast(int, data.get(b"commission_percentage"))
        self.contract_admin = ByteReader(typing.cast(bytes, data.get(b"contract_admin")))
        self.epoch_nft_transactions = typing.cast(int, data.get(b"epoch_nft_transactions"))
        self.epoch_target_transaction = typing.cast(int, data.get(b"epoch_target_transaction"))
        self.min_aural_reward = typing.cast(int, data.get(b"min_aural_reward"))
        self.min_charge_price = typing.cast(int, data.get(b"min_charge_price"))
        self.min_difficulty = typing.cast(int, data.get(b"min_difficulty"))
        self.network_difficulty = typing.cast(int, data.get(b"network_difficulty"))
        self.rewardable_tokens_supply = typing.cast(int, data.get(b"rewardable_tokens_supply"))
        self.total_aurally_tokens = typing.cast(int, data.get(b"total_aurally_tokens"))
        self.total_nft_transactions = typing.cast(int, data.get(b"total_nft_transactions"))
        self.total_target_nft_sales = typing.cast(int, data.get(b"total_target_nft_sales"))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self) -> SimulateAtomicTransactionResponse:
        result = self.atc.simulate(self.app_client.algod_client)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def promote_to_admin(
        self,
        *,
        address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `promote_to_admin(address)void` ABI method
        
        :param str address: The `address` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PromoteToAdminArgs(
            address=address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def reward_with_aura_tokens(
        self,
        *,
        txn: TransactionWithSigner,
        receiver: str | bytes,
        aura: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `reward_with_aura_tokens(txn,account,asset)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes receiver: The `receiver` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RewardWithAuraTokensArgs(
            txn=txn,
            receiver=receiver,
            aura=aura,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_commission_percentage(
        self,
        *,
        amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update_commission_percentage(uint8)void` ABI method
        
        :param int amt: The `amt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateCommissionPercentageArgs(
            amt=amt,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_aura_rewards(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update_aura_rewards()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateAuraRewardsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_target_nft_transactions(
        self,
        *,
        target: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update_target_nft_transactions(uint64)void` ABI method
        
        :param int target: The `target` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateTargetNftTransactionsArgs(
            target=target,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_profits(
        self,
        *,
        amt: int,
        to: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `withdraw_profits(uint64,account)void` ABI method
        
        :param int amt: The `amt` ABI parameter
        :param str | bytes to: The `to` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawProfitsArgs(
            amt=amt,
            to=to,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_min_charge_price(
        self,
        *,
        price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update_min_charge_price(uint64)void` ABI method
        
        :param int price: The `price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateMinChargePriceArgs(
            price=price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_aura_tokens(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_aura_tokens()(uint64,string,uint64,bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateAuraTokensArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_aura_percentage(
        self,
        *,
        percent_receiver: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `claim_aura_percentage(account)void` ABI method
        
        :param str | bytes percent_receiver: The `percent_receiver` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimAuraPercentageArgs(
            percent_receiver=percent_receiver,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def register_creator(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `register_creator(txn)(address,uint64,uint64)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegisterCreatorArgs(
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        nft_name: str,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: int,
        genre: str,
        description: str,
        price: int,
        cover_image_url: str,
        supply: int,
        aura: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param int release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param str description: The `description` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_url: The `cover_image_url` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateSoundNftArgs(
            txn=txn,
            nft_name=nft_name,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            description=description,
            price=price,
            cover_image_url=cover_image_url,
            supply=supply,
            aura=aura,
            creator=creator,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_name: str,
        title: str,
        name: str,
        description: str,
        image_url: str,
        price: int,
        aura: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param str description: The `description` ABI parameter
        :param str image_url: The `image_url` ABI parameter
        :param int price: The `price` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_name=nft_name,
            title=title,
            name=name,
            description=description,
            image_url=image_url,
            price=price,
            aura=aura,
            creator=creator,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def claim_created_art(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        receiver: str | bytes,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str | bytes receiver: The `receiver` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClaimCreatedArtArgs(
            txn=txn,
            asset_key=asset_key,
            receiver=receiver,
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        asset_key: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        description: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param str description: The `description` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            asset_key=asset_key,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
            description=description,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def bid_on_art_auction(
        self,
        *,
        auction_key: str,
        txn: TransactionWithSigner,
        current_highest_bidder: str | bytes,
        optin_txn: TransactionWithSigner,
        aura_optin_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)` ABI method
        
        :param str auction_key: The `auction_key` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes current_highest_bidder: The `current_highest_bidder` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BidOnArtAuctionArgs(
            auction_key=auction_key,
            txn=txn,
            current_highest_bidder=current_highest_bidder,
            optin_txn=optin_txn,
            aura_optin_txn=aura_optin_txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        aura: int,
        auction_key: str,
        auctioneer_account: str | bytes,
        highest_bidder_account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str | bytes auctioneer_account: The `auctioneer_account` ABI parameter
        :param str | bytes highest_bidder_account: The `highest_bidder_account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            aura=aura,
            auction_key=auction_key,
            auctioneer_account=auctioneer_account,
            highest_bidder_account=highest_bidder_account,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def place_art_on_sale(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        sale_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int sale_price: The `sale_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PlaceArtOnSaleArgs(
            txn=txn,
            asset_key=asset_key,
            sale_price=sale_price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        optin_txn: TransactionWithSigner,
        asset_key: str,
        asset_type: str,
        buyer: str | bytes,
        asset: int,
        aura: int,
        seller_account: str | bytes,
        aura_optin_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str asset_type: The `asset_type` ABI parameter
        :param str | bytes buyer: The `buyer` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes seller_account: The `seller_account` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PurchaseNftArgs(
            txn=txn,
            optin_txn=optin_txn,
            asset_key=asset_key,
            asset_type=asset_type,
            buyer=buyer,
            asset=asset,
            aura=aura,
            seller_account=seller_account,
            aura_optin_txn=aura_optin_txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def update_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateArgs()
        self.app_client.compose_update(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class AurallyNftClient:
    """A class for interacting with the Aurally_NFT app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        AurallyNftClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def promote_to_admin(
        self,
        *,
        address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `promote_to_admin(address)void` ABI method
        
        :param str address: The `address` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PromoteToAdminArgs(
            address=address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def reward_with_aura_tokens(
        self,
        *,
        txn: TransactionWithSigner,
        receiver: str | bytes,
        aura: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `reward_with_aura_tokens(txn,account,asset)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes receiver: The `receiver` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = RewardWithAuraTokensArgs(
            txn=txn,
            receiver=receiver,
            aura=aura,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_commission_percentage(
        self,
        *,
        amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `update_commission_percentage(uint8)void` ABI method
        
        :param int amt: The `amt` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateCommissionPercentageArgs(
            amt=amt,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_aura_rewards(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `update_aura_rewards()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateAuraRewardsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_target_nft_transactions(
        self,
        *,
        target: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `update_target_nft_transactions(uint64)void` ABI method
        
        :param int target: The `target` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateTargetNftTransactionsArgs(
            target=target,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_profits(
        self,
        *,
        amt: int,
        to: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `withdraw_profits(uint64,account)void` ABI method
        
        :param int amt: The `amt` ABI parameter
        :param str | bytes to: The `to` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawProfitsArgs(
            amt=amt,
            to=to,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_min_charge_price(
        self,
        *,
        price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `update_min_charge_price(uint64)void` ABI method
        
        :param int price: The `price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateMinChargePriceArgs(
            price=price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_aura_tokens(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyToken]:
        """Calls `create_aura_tokens()(uint64,string,uint64,bool)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyToken]: The result of the transaction"""

        args = CreateAuraTokensArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyToken(**result_dict)
        return result

    def claim_aura_percentage(
        self,
        *,
        percent_receiver: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `claim_aura_percentage(account)void` ABI method
        
        :param str | bytes percent_receiver: The `percent_receiver` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClaimAuraPercentageArgs(
            percent_receiver=percent_receiver,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def register_creator(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyCreative]:
        """Calls `register_creator(txn)(address,uint64,uint64)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyCreative]: The result of the transaction"""

        args = RegisterCreatorArgs(
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyCreative(**result_dict)
        return result

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        nft_name: str,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: int,
        genre: str,
        description: str,
        price: int,
        cover_image_url: str,
        supply: int,
        aura: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SoundNft]:
        """Calls `create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param int release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param str description: The `description` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_url: The `cover_image_url` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SoundNft]: The result of the transaction"""

        args = CreateSoundNftArgs(
            txn=txn,
            nft_name=nft_name,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            description=description,
            price=price,
            cover_image_url=cover_image_url,
            supply=supply,
            aura=aura,
            creator=creator,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SoundNft(**result_dict)
        return result

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_name: str,
        title: str,
        name: str,
        description: str,
        image_url: str,
        price: int,
        aura: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param str description: The `description` ABI parameter
        :param str image_url: The `image_url` ABI parameter
        :param int price: The `price` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CreateArtNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_name=nft_name,
            title=title,
            name=name,
            description=description,
            image_url=image_url,
            price=price,
            aura=aura,
            creator=creator,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def claim_created_art(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        receiver: str | bytes,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str | bytes receiver: The `receiver` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = ClaimCreatedArtArgs(
            txn=txn,
            asset_key=asset_key,
            receiver=receiver,
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        asset_key: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        description: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param str description: The `description` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            asset_key=asset_key,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
            description=description,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def bid_on_art_auction(
        self,
        *,
        auction_key: str,
        txn: TransactionWithSigner,
        current_highest_bidder: str | bytes,
        optin_txn: TransactionWithSigner,
        aura_optin_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)` ABI method
        
        :param str auction_key: The `auction_key` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes current_highest_bidder: The `current_highest_bidder` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = BidOnArtAuctionArgs(
            auction_key=auction_key,
            txn=txn,
            current_highest_bidder=current_highest_bidder,
            optin_txn=optin_txn,
            aura_optin_txn=aura_optin_txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        aura: int,
        auction_key: str,
        auctioneer_account: str | bytes,
        highest_bidder_account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str | bytes auctioneer_account: The `auctioneer_account` ABI parameter
        :param str | bytes highest_bidder_account: The `highest_bidder_account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            aura=aura,
            auction_key=auction_key,
            auctioneer_account=auctioneer_account,
            highest_bidder_account=highest_bidder_account,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def place_art_on_sale(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        sale_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int sale_price: The `sale_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = PlaceArtOnSaleArgs(
            txn=txn,
            asset_key=asset_key,
            sale_price=sale_price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        optin_txn: TransactionWithSigner,
        asset_key: str,
        asset_type: str,
        buyer: str | bytes,
        asset: int,
        aura: int,
        seller_account: str | bytes,
        aura_optin_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str asset_type: The `asset_type` ABI parameter
        :param str | bytes buyer: The `buyer` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes seller_account: The `seller_account` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PurchaseNftArgs(
            txn=txn,
            optin_txn=optin_txn,
            asset_key=asset_key,
            asset_type=asset_type,
            buyer=buyer,
            asset=asset,
            aura=aura,
            seller_account=seller_account,
            aura_optin_txn=aura_optin_txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def update_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `update()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateArgs()
        result = self.app_client.update(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: Deploy[UpdateArgs],
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param Deploy[UpdateArgs] update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
