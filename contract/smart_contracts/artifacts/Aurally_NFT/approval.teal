#pragma version 8
intcblock 0 1 65536 10 786 1000 784 785
bytecblock 0x 0x00 0x151f7c75 0x617572615f726577617264 0x068101 0x65706f63685f6e66745f7472616e73616374696f6e73 0x6e6574776f726b5f646966666963756c7479 0x61757261 0x746f74616c5f6e66745f7472616e73616374696f6e73 0x617572615f626173655f726577617264 0x636f6d6d697373696f6e5f70657263656e74616765 0x636f6e74726163745f61646d696e 0x65706f63685f7461726765745f7472616e73616374696f6e 0x6d696e5f6368617267655f7072696365 0x746f74616c5f617572616c6c795f746f6b656e73 0x000461757261 0x6d696e5f617572616c5f726577617264 0x6d696e5f646966666963756c7479 0x72657761726461626c655f746f6b656e735f737570706c79 0x746f74616c5f7461726765745f6e66745f73616c6573 0x736f756e64
txn NumAppArgs
intc_0 // 0
==
bnz main_l40
txna ApplicationArgs 0
pushbytes 0xa0e81872 // "update()void"
==
bnz main_l39
txna ApplicationArgs 0
pushbytes 0x11e1477f // "promote_to_admin(address)void"
==
bnz main_l38
txna ApplicationArgs 0
pushbytes 0x513f72cb // "reward_with_aura_tokens(txn,account,asset)void"
==
bnz main_l37
txna ApplicationArgs 0
pushbytes 0x03b15594 // "update_commission_percentage(uint8)void"
==
bnz main_l36
txna ApplicationArgs 0
pushbytes 0xa6e7e062 // "update_aura_rewards()void"
==
bnz main_l35
txna ApplicationArgs 0
pushbytes 0xb3b815fa // "update_target_nft_transactions(uint64)void"
==
bnz main_l34
txna ApplicationArgs 0
pushbytes 0x3f802278 // "withdraw_profits(uint64,account)void"
==
bnz main_l33
txna ApplicationArgs 0
pushbytes 0xb956782f // "update_min_charge_price(uint64)void"
==
bnz main_l32
txna ApplicationArgs 0
pushbytes 0x5e53f297 // "create_aura_tokens()(uint64,string,uint64)"
==
bnz main_l31
txna ApplicationArgs 0
pushbytes 0x25b2d2d5 // "transfer_auras(account,uint64,asset)void"
==
bnz main_l30
txna ApplicationArgs 0
pushbytes 0x365d9c5b // "register_creator(txn)(address,uint64,uint64)"
==
bnz main_l29
txna ApplicationArgs 0
pushbytes 0xef4af010 // "create_sound_nft(pay,string,string,string,string,string,uint64,string,string,uint64,string,uint64,asset,account)(uint64,string,uint64,string,string,string,uint64,string,string,uint64,string,address,bool,bool)"
==
bnz main_l28
txna ApplicationArgs 0
pushbytes 0xa4218c93 // "create_art_nft(pay,string,string,string,string,string,string,uint64,asset,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
==
bnz main_l27
txna ApplicationArgs 0
pushbytes 0x6259859c // "claim_created_art(axfer,string,account,asset)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
==
bnz main_l26
txna ApplicationArgs 0
pushbytes 0x823cad1f // "create_art_auction(pay,string,string,uint64,uint64,uint64,string)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
==
bnz main_l25
txna ApplicationArgs 0
pushbytes 0x9febf9df // "bid_on_art_auction(string,pay,account,axfer,axfer)(string,address,string,string,uint64,uint64,uint64,string,uint64,address,bool)"
==
bnz main_l24
txna ApplicationArgs 0
pushbytes 0xf9d3bd4e // "complete_art_auction(axfer,asset,string,account,account)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
==
bnz main_l23
txna ApplicationArgs 0
pushbytes 0x488753ee // "place_art_on_sale(axfer,string,uint64)(uint64,string,string,string,string,string,uint64,uint64,address,address,bool,bool,bool)"
==
bnz main_l22
txna ApplicationArgs 0
pushbytes 0x2db3e347 // "purchase_nft(pay,axfer,string,string,account,asset,asset,account,axfer)void"
==
bnz main_l21
err
main_l21:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub purchasenftcaster_60
intc_1 // 1
return
main_l22:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub placeartonsalecaster_59
intc_1 // 1
return
main_l23:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub completeartauctioncaster_58
intc_1 // 1
return
main_l24:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub bidonartauctioncaster_57
intc_1 // 1
return
main_l25:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub createartauctioncaster_56
intc_1 // 1
return
main_l26:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub claimcreatedartcaster_55
intc_1 // 1
return
main_l27:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub createartnftcaster_54
intc_1 // 1
return
main_l28:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub createsoundnftcaster_53
intc_1 // 1
return
main_l29:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub registercreatorcaster_52
intc_1 // 1
return
main_l30:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub transferaurascaster_51
intc_1 // 1
return
main_l31:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub createauratokenscaster_50
intc_1 // 1
return
main_l32:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub updateminchargepricecaster_49
intc_1 // 1
return
main_l33:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub withdrawprofitscaster_48
intc_1 // 1
return
main_l34:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub updatetargetnfttransactionscaster_47
intc_1 // 1
return
main_l35:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub updateaurarewardscaster_46
intc_1 // 1
return
main_l36:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub updatecommissionpercentagecaster_45
intc_1 // 1
return
main_l37:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub rewardwithauratokenscaster_44
intc_1 // 1
return
main_l38:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub promotetoadmincaster_43
intc_1 // 1
return
main_l39:
txn OnCompletion
pushint 4 // UpdateApplication
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub updatecaster_42
intc_1 // 1
return
main_l40:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l42
err
main_l42:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
proto 0 0
bytec 9 // "aura_base_reward"
intc_3 // 10
app_global_put
bytec_3 // "aura_reward"
intc_3 // 10
app_global_put
bytec 10 // "commission_percentage"
intc_3 // 10
app_global_put
bytec 11 // "contract_admin"
bytec_0 // ""
app_global_put
bytec 5 // "epoch_nft_transactions"
intc_0 // 0
app_global_put
bytec 12 // "epoch_target_transaction"
pushint 500 // 500
app_global_put
bytec 16 // "min_aural_reward"
intc_3 // 10
app_global_put
bytec 13 // "min_charge_price"
intc_1 // 1
app_global_put
bytec 17 // "min_difficulty"
intc_3 // 10
app_global_put
bytec 6 // "network_difficulty"
intc_3 // 10
app_global_put
bytec 18 // "rewardable_tokens_supply"
pushint 80000000000000 // 80000000000000
app_global_put
intc_0 // 0
bytec 14 // "total_aurally_tokens"
app_global_get_ex
store 1
store 0
load 1
!
assert
bytec 14 // "total_aurally_tokens"
pushint 100000000000000 // 100000000000000
app_global_put
bytec 8 // "total_nft_transactions"
intc_0 // 0
app_global_put
bytec 19 // "total_target_nft_sales"
pushint 1600000000 // 1600000000
app_global_put
retsub

// update
update_1:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
intc_1 // 1
return

// promote_to_admin
promotetoadmin_2:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 11 // "contract_admin"
frame_dig -1
app_global_put
retsub

// reward_with_aura_tokens
rewardwithauratokens_3:
proto 3 0
bytec_0 // ""
frame_dig -1
callsub ensureassetisaura_31
bytec 11 // "contract_admin"
app_global_get
frame_dig -3
gtxns Sender
==
// Only contract_admins are allowed to perform this action
assert
frame_dig -2
txnas Accounts
frame_bury 0
frame_dig 0
len
pushint 32 // 32
==
assert
frame_dig 0
callsub rewardwithauratokens_38
retsub

// update_commission_percentage
updatecommissionpercentage_4:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 10 // "commission_percentage"
frame_dig -1
app_global_put
frame_dig -1
pushint 100 // 100
<=
// The commission_percentage must be less that 100%
assert
retsub

// update_aura_rewards
updateaurarewards_5:
proto 0 0
callsub calculateandupdatereward_28
retsub

// update_target_nft_transactions
updatetargetnfttransactions_6:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 12 // "epoch_target_transaction"
frame_dig -1
app_global_put
bytec 8 // "total_nft_transactions"
intc_0 // 0
app_global_put
callsub calculateandupdatereward_28
retsub

// withdraw_profits
withdrawprofits_7:
proto 2 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -2
itxn_field Amount
frame_dig -1
txnas Accounts
itxn_field Receiver
pushbytes 0x5769746864726177616c2066726f6d20417572616c6c79204e465473 // "Withdrawal from Aurally NFTs"
itxn_field Note
itxn_submit
retsub

// update_min_charge_price
updateminchargeprice_8:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 13 // "min_charge_price"
frame_dig -1
app_global_put
retsub

// create_aura_tokens
createauratokens_9:
proto 0 1
bytec_0 // ""
dupn 3
intc_0 // 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 15 // 0x000461757261
frame_bury 1
pushbytes 0x0003415552 // 0x0003415552
frame_bury 2
pushbytes 0x005268747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f6465762d6d656469612f696d6167652f75706c6f61642f76313730333039313731302f417572616c6c795f415f703176326f622e706e67 // 0x005268747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f6465762d6d656469612f696d6167652f75706c6f61642f76313730333039313731302f417572616c6c795f415f703176326f622e706e67
frame_bury 3
frame_dig 1
extract 2 0
box_len
store 7
store 6
load 7
!
bz createauratokens_9_l2
bytec 14 // "total_aurally_tokens"
app_global_get
frame_bury 4
frame_dig 1
frame_dig 4
frame_dig 2
frame_dig 3
callsub bootstraptoken_20
createauratokens_9_l2:
frame_dig 1
extract 2 0
box_get
store 9
store 8
load 9
assert
load 8
frame_bury 0
retsub

// transfer_auras
transferauras_10:
proto 3 0
bytec_0 // ""
dup
intc_0 // 0
dupn 3
bytec_0 // ""
dup
txn Sender
global CreatorAddress
==
// unauthorized
assert
frame_dig -1
callsub ensureassetisaura_31
bytec 15 // 0x000461757261
frame_bury 0
bytec 7 // "aura"
box_get
store 13
store 12
load 13
assert
load 12
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
intc_3 // 10
extract_uint64
frame_bury 3
frame_dig 3
frame_dig -2
-
frame_bury 3
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig 2
itxn_field XferAsset
frame_dig -3
txnas Accounts
itxn_field AssetReceiver
frame_dig -2
itxn_field AssetAmount
itxn_submit
frame_dig 2
itob
frame_dig 0
frame_bury 7
frame_dig 7
frame_bury 6
pushint 18 // 18
frame_bury 4
frame_dig 4
itob
extract 6 0
concat
frame_dig 3
itob
concat
frame_dig 6
concat
frame_bury 1
frame_dig 0
extract 2 0
box_del
pop
frame_dig 0
extract 2 0
frame_dig 1
box_put
retsub

// register_creator
registercreator_11:
proto 1 1
bytec_0 // ""
frame_dig -1
gtxns Sender
box_len
store 15
store 14
load 15
!
bz registercreator_11_l2
frame_dig -1
callsub createnftowner_22
registercreator_11_l2:
frame_dig -1
gtxns Sender
box_get
store 17
store 16
load 17
assert
load 16
frame_bury 0
retsub

// create_sound_nft
createsoundnft_12:
proto 14 1
bytec_0 // ""
dup
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
store 18
createsoundnft_12_l1:
load 18
intc 5 // 1000
global MinTxnFee
/
<
bz createsoundnft_12_l3
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec 4 // 0x068101
itxn_field ApprovalProgram
bytec 4 // 0x068101
itxn_field ClearStateProgram
itxn_submit
load 18
intc_1 // 1
+
store 18
b createsoundnft_12_l1
createsoundnft_12_l3:
frame_dig -2
callsub ensureassetisaura_31
frame_dig -14
callsub ensuresenderisregisteredcreative_29
frame_dig -1
txnas Accounts
frame_dig -14
gtxns Sender
==
// The creator must be the same as the transaction sender
assert
frame_dig -12
extract 2 0
box_len
store 20
store 19
load 20
!
// An asset with this key already exists
assert
frame_dig -14
gtxns Sender
frame_bury 1
frame_dig 1
len
pushint 32 // 32
==
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
frame_dig -13
extract 2 0
itxn_field ConfigAssetName
frame_dig -3
itxn_field ConfigAssetTotal
frame_dig -4
extract 2 0
itxn_field ConfigAssetURL
frame_dig 1
itxn_field ConfigAssetManager
itxn_submit
itxn CreatedAssetID
frame_bury 2
intc_1 // 1
frame_bury 3
intc_0 // 0
frame_bury 4
frame_dig 2
itob
frame_dig -12
frame_bury 9
frame_dig 9
frame_bury 8
pushint 79 // 79
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -3
itob
concat
frame_dig -11
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -10
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -9
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -8
itob
concat
frame_dig -7
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -6
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
frame_dig 9
len
+
frame_bury 7
frame_dig 7
intc_2 // 65536
<
assert
frame_dig 6
itob
extract 6 0
concat
frame_dig -5
itob
concat
frame_dig -4
frame_bury 9
frame_dig 8
frame_dig 9
concat
frame_bury 8
frame_dig 7
frame_bury 6
frame_dig 6
itob
extract 6 0
concat
frame_dig 1
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 3
setbit
intc_1 // 1
frame_dig 4
setbit
concat
frame_dig 8
concat
frame_bury 5
frame_dig -12
extract 2 0
box_del
pop
frame_dig -12
extract 2 0
frame_dig 5
box_put
frame_dig 1
callsub incrementcreatornftcount_23
callsub increaseappnfttransactioncount_21
callsub calculateandupdatereward_28
frame_dig -12
extract 2 0
box_get
store 22
store 21
load 22
assert
load 21
frame_bury 0
retsub

// create_art_nft
createartnft_13:
proto 10 1
bytec_0 // ""
dup
intc_0 // 0
dupn 3
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
store 27
createartnft_13_l1:
load 27
intc 5 // 1000
global MinTxnFee
/
<
bz createartnft_13_l3
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec 4 // 0x068101
itxn_field ApprovalProgram
bytec 4 // 0x068101
itxn_field ClearStateProgram
itxn_submit
load 27
intc_1 // 1
+
store 27
b createartnft_13_l1
createartnft_13_l3:
frame_dig -10
callsub ensuresenderisregisteredcreative_29
frame_dig -2
callsub ensureassetisaura_31
frame_dig -1
txnas Accounts
frame_dig -10
gtxns Sender
==
// The creator must be the same as the transaction sender
assert
frame_dig -9
extract 2 0
box_len
store 29
store 28
load 29
!
// An art NFT with this key already exists
assert
frame_dig -10
gtxns Sender
frame_bury 1
frame_dig 1
len
pushint 32 // 32
==
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
frame_dig -8
extract 2 0
itxn_field ConfigAssetName
intc_1 // 1
itxn_field ConfigAssetTotal
frame_dig -4
extract 2 0
itxn_field ConfigAssetURL
frame_dig 1
itxn_field ConfigAssetManager
itxn_submit
itxn CreatedAssetID
frame_bury 2
intc_0 // 0
frame_bury 3
intc_0 // 0
frame_bury 4
intc_0 // 0
frame_bury 5
global CurrentApplicationAddress
frame_bury 6
frame_dig 6
len
pushint 32 // 32
==
assert
intc_0 // 0
frame_bury 7
frame_dig 2
itob
frame_dig -9
frame_bury 12
frame_dig 12
frame_bury 11
pushint 99 // 99
frame_bury 9
frame_dig 9
frame_dig 12
len
+
frame_bury 10
frame_dig 10
intc_2 // 65536
<
assert
frame_dig 9
itob
extract 6 0
concat
frame_dig -7
frame_bury 12
frame_dig 11
frame_dig 12
concat
frame_bury 11
frame_dig 10
frame_bury 9
frame_dig 9
frame_dig 12
len
+
frame_bury 10
frame_dig 10
intc_2 // 65536
<
assert
frame_dig 9
itob
extract 6 0
concat
frame_dig -6
frame_bury 12
frame_dig 11
frame_dig 12
concat
frame_bury 11
frame_dig 10
frame_bury 9
frame_dig 9
frame_dig 12
len
+
frame_bury 10
frame_dig 10
intc_2 // 65536
<
assert
frame_dig 9
itob
extract 6 0
concat
frame_dig -5
frame_bury 12
frame_dig 11
frame_dig 12
concat
frame_bury 11
frame_dig 10
frame_bury 9
frame_dig 9
frame_dig 12
len
+
frame_bury 10
frame_dig 10
intc_2 // 65536
<
assert
frame_dig 9
itob
extract 6 0
concat
frame_dig -4
frame_bury 12
frame_dig 11
frame_dig 12
concat
frame_bury 11
frame_dig 10
frame_bury 9
frame_dig 9
itob
extract 6 0
concat
frame_dig -3
itob
concat
frame_dig 3
itob
concat
frame_dig 1
concat
frame_dig 6
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 4
setbit
intc_1 // 1
frame_dig 5
setbit
pushint 2 // 2
frame_dig 7
setbit
concat
frame_dig 11
concat
frame_bury 8
frame_dig -9
extract 2 0
box_del
pop
frame_dig -9
extract 2 0
frame_dig 8
box_put
frame_dig 1
callsub incrementcreatornftcount_23
callsub increaseappnfttransactioncount_21
callsub calculateandupdatereward_28
frame_dig -9
extract 2 0
box_get
store 31
store 30
load 31
assert
load 30
frame_bury 0
retsub

// claim_created_art
claimcreatedart_14:
proto 4 1
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
dupn 4
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dupn 5
bytec_0 // ""
dup
frame_dig -3
callsub ensureartnftexists_35
frame_dig -3
extract 2 0
box_get
store 33
store 32
load 33
assert
load 32
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
frame_dig 1
pushint 8 // 8
extract_uint16
frame_dig 1
intc_3 // 10
extract_uint16
substring3
frame_bury 3
frame_dig 1
frame_dig 1
intc_3 // 10
extract_uint16
frame_dig 1
pushint 12 // 12
extract_uint16
substring3
frame_bury 4
frame_dig 1
frame_dig 1
pushint 12 // 12
extract_uint16
frame_dig 1
pushint 14 // 14
extract_uint16
substring3
frame_bury 5
frame_dig 1
frame_dig 1
pushint 14 // 14
extract_uint16
frame_dig 1
pushint 16 // 16
extract_uint16
substring3
frame_bury 6
frame_dig 1
frame_dig 1
pushint 16 // 16
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 1
pushint 18 // 18
extract_uint64
frame_bury 8
frame_dig 1
pushint 26 // 26
extract_uint64
frame_bury 9
frame_dig 1
extract 34 32
frame_bury 10
frame_dig 1
extract 66 32
frame_bury 11
frame_dig 1
intc 6 // 784
getbit
frame_bury 12
frame_dig 1
intc 7 // 785
getbit
frame_bury 13
frame_dig 1
intc 4 // 786
getbit
frame_bury 14
frame_dig 14
!
// This art nft has already been claimed
assert
frame_dig -2
txnas Accounts
frame_dig 10
==
// The receiver must be the creator of the nft
assert
frame_dig 10
frame_dig -4
gtxns Sender
==
// This address is not the nft creator
assert
frame_dig -1
txnas Assets
frame_dig 2
==
// The asset must have the same asset_id as the nft
assert
intc_1 // 1
frame_bury 15
frame_dig 2
frame_dig 15
frame_dig 10
callsub transferassetfromcontract_39
frame_dig -4
gtxns Sender
frame_bury 11
frame_dig 11
len
pushint 32 // 32
==
assert
intc_1 // 1
frame_bury 14
frame_dig 2
itob
frame_dig 3
frame_bury 19
frame_dig 19
frame_bury 18
pushint 99 // 99
frame_bury 16
frame_dig 16
frame_dig 19
len
+
frame_bury 17
frame_dig 17
intc_2 // 65536
<
assert
frame_dig 16
itob
extract 6 0
concat
frame_dig 4
frame_bury 19
frame_dig 18
frame_dig 19
concat
frame_bury 18
frame_dig 17
frame_bury 16
frame_dig 16
frame_dig 19
len
+
frame_bury 17
frame_dig 17
intc_2 // 65536
<
assert
frame_dig 16
itob
extract 6 0
concat
frame_dig 5
frame_bury 19
frame_dig 18
frame_dig 19
concat
frame_bury 18
frame_dig 17
frame_bury 16
frame_dig 16
frame_dig 19
len
+
frame_bury 17
frame_dig 17
intc_2 // 65536
<
assert
frame_dig 16
itob
extract 6 0
concat
frame_dig 6
frame_bury 19
frame_dig 18
frame_dig 19
concat
frame_bury 18
frame_dig 17
frame_bury 16
frame_dig 16
frame_dig 19
len
+
frame_bury 17
frame_dig 17
intc_2 // 65536
<
assert
frame_dig 16
itob
extract 6 0
concat
frame_dig 7
frame_bury 19
frame_dig 18
frame_dig 19
concat
frame_bury 18
frame_dig 17
frame_bury 16
frame_dig 16
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
itob
concat
frame_dig 10
concat
frame_dig 11
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 12
setbit
intc_1 // 1
frame_dig 13
setbit
pushint 2 // 2
frame_dig 14
setbit
concat
frame_dig 18
concat
frame_bury 1
frame_dig 3
extract 2 0
box_del
pop
frame_dig 3
extract 2 0
frame_dig 1
box_put
callsub calculateandupdatereward_28
frame_dig 3
extract 2 0
box_get
store 35
store 34
load 35
assert
load 34
frame_bury 0
retsub

// create_art_auction
createartauction_15:
proto 7 1
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
dupn 3
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -6
extract 2 0
box_len
store 39
store 38
load 39
!
// An auction with this key already exists
assert
frame_dig -3
frame_dig -2
<
// End date must be greater that start date
assert
frame_dig -5
callsub ensurecanmarketart_37
frame_dig -5
extract 2 0
box_get
store 41
store 40
load 41
assert
load 40
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
frame_dig 1
intc_3 // 10
extract_uint16
frame_dig 1
pushint 12 // 12
extract_uint16
substring3
frame_bury 3
frame_dig 1
frame_dig 1
pushint 12 // 12
extract_uint16
frame_dig 1
pushint 14 // 14
extract_uint16
substring3
frame_bury 4
frame_dig 1
frame_dig 1
pushint 14 // 14
extract_uint16
frame_dig 1
pushint 16 // 16
extract_uint16
substring3
frame_bury 5
frame_dig 1
frame_dig 1
pushint 16 // 16
extract_uint16
dig 1
len
substring3
frame_bury 6
frame_dig 1
pushint 18 // 18
extract_uint64
frame_bury 7
frame_dig 1
pushint 26 // 26
extract_uint64
frame_bury 8
frame_dig 1
extract 34 32
frame_bury 9
frame_dig 1
extract 66 32
frame_bury 10
frame_dig 1
intc 6 // 784
getbit
frame_bury 11
intc_1 // 1
frame_bury 12
frame_dig 1
intc 4 // 786
getbit
frame_bury 13
frame_dig 1
frame_dig 1
pushint 12 // 12
extract_uint16
frame_dig 1
pushint 14 // 14
extract_uint16
substring3
frame_bury 14
frame_dig 2
itob
frame_dig -5
frame_bury 18
frame_dig 18
frame_bury 17
pushint 99 // 99
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 3
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 4
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 5
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 6
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
itob
extract 6 0
concat
frame_dig 7
itob
concat
frame_dig 8
itob
concat
frame_dig 9
concat
frame_dig 10
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 11
setbit
intc_1 // 1
frame_dig 12
setbit
pushint 2 // 2
frame_dig 13
setbit
concat
frame_dig 17
concat
frame_bury 1
frame_dig -5
extract 2 0
box_del
pop
frame_dig -5
extract 2 0
frame_dig 1
box_put
frame_dig 10
frame_dig -7
gtxns Sender
==
// Only the owner of this NFT can auction it
assert
frame_dig -7
frame_dig -6
frame_dig -5
frame_dig 14
frame_dig -1
frame_dig -4
frame_dig -3
frame_dig -2
callsub newartauction_24
callsub calculateandupdatereward_28
frame_dig -6
extract 2 0
box_get
store 43
store 42
load 43
assert
load 42
frame_bury 0
retsub

// bid_on_art_auction
bidonartauction_16:
proto 5 1
bytec_0 // ""
dupn 2
intc_0 // 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
frame_dig -5
callsub ensureartauctionexists_33
frame_dig -4
gtxns Receiver
global CurrentApplicationAddress
==
assert
frame_dig -5
extract 2 0
box_get
store 49
store 48
load 49
assert
load 48
frame_bury 1
frame_dig 1
frame_dig 1
pushint 36 // 36
extract_uint16
frame_dig 1
pushint 62 // 62
extract_uint16
substring3
frame_bury 2
frame_dig 1
pushint 64 // 64
extract_uint64
frame_bury 3
frame_dig 1
extract 72 32
frame_bury 4
frame_dig 1
pushint 38 // 38
extract_uint64
frame_bury 5
frame_dig 1
frame_dig 1
pushint 34 // 34
extract_uint16
frame_dig 1
pushint 36 // 36
extract_uint16
substring3
frame_bury 6
frame_dig 6
extract 2 0
box_get
store 51
store 50
load 51
assert
load 50
frame_bury 7
frame_dig 7
intc_0 // 0
extract_uint64
frame_bury 8
bytec 7 // "aura"
box_get
store 53
store 52
load 53
assert
load 52
frame_bury 9
frame_dig 9
intc_0 // 0
extract_uint64
frame_bury 10
frame_dig -2
gtxns XferAsset
frame_dig 8
==
// Account must opt it to the asset bid on it
assert
frame_dig -1
gtxns XferAsset
frame_dig 10
==
// Account mus opt in to aura to bid on asset
assert
frame_dig -3
txnas Accounts
frame_dig 4
==
// The current_highest_bidder passed is not the highest_bidder
assert
frame_dig 3
intc_0 // 0
==
bnz bidonartauction_16_l4
frame_dig -4
gtxns Amount
frame_dig 3
>
// Bid amount must be greater that the highest_bid
assert
bidonartauction_16_l2:
frame_dig 4
global CurrentApplicationAddress
==
!
bz bidonartauction_16_l5
pushbytes 0x526566756e6420666f7220796f757220626964206f6e3a20 // "Refund for your bid on: "
frame_dig 2
extract 2 0
concat
frame_bury 11
frame_dig 11
len
itob
extract 6 0
frame_dig 11
concat
frame_bury 11
frame_dig -3
frame_dig 3
frame_dig 11
callsub refundlastbidder_40
b bidonartauction_16_l5
bidonartauction_16_l4:
frame_dig -4
gtxns Amount
frame_dig 5
>
// Bid amount has to be greater than the minimum bid
assert
b bidonartauction_16_l2
bidonartauction_16_l5:
frame_dig -4
frame_dig -5
callsub recordauctionbid_25
callsub calculateandupdatereward_28
frame_dig -5
extract 2 0
box_get
store 55
store 54
load 55
assert
load 54
frame_bury 0
retsub

// complete_art_auction
completeartauction_17:
proto 5 1
bytec_0 // ""
dupn 4
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
dupn 4
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dupn 2
bytec_0 // ""
intc_0 // 0
dupn 2
bytec_0 // ""
dupn 2
frame_dig -3
callsub ensureartauctionexists_33
frame_dig -3
extract 2 0
box_get
store 61
store 60
load 61
assert
load 60
frame_bury 1
frame_dig 1
frame_dig 1
pushint 34 // 34
extract_uint16
frame_dig 1
pushint 36 // 36
extract_uint16
substring3
frame_bury 2
frame_dig 1
frame_dig 1
pushint 36 // 36
extract_uint16
frame_dig 1
pushint 62 // 62
extract_uint16
substring3
frame_bury 3
frame_dig 1
extract 2 32
frame_bury 4
frame_dig 1
pushint 64 // 64
extract_uint64
frame_bury 5
frame_dig 1
extract 72 32
frame_bury 6
frame_dig 2
extract 2 0
box_get
store 63
store 62
load 63
assert
load 62
frame_bury 7
frame_dig 7
intc_0 // 0
extract_uint64
frame_bury 8
frame_dig 7
frame_dig 7
pushint 8 // 8
extract_uint16
frame_dig 7
intc_3 // 10
extract_uint16
substring3
frame_bury 9
frame_dig 7
frame_dig 7
intc_3 // 10
extract_uint16
frame_dig 7
pushint 12 // 12
extract_uint16
substring3
frame_bury 10
frame_dig 7
frame_dig 7
pushint 12 // 12
extract_uint16
frame_dig 7
pushint 14 // 14
extract_uint16
substring3
frame_bury 11
frame_dig 7
frame_dig 7
pushint 14 // 14
extract_uint16
frame_dig 7
pushint 16 // 16
extract_uint16
substring3
frame_bury 12
frame_dig 7
frame_dig 7
pushint 16 // 16
extract_uint16
dig 1
len
substring3
frame_bury 13
frame_dig 7
pushint 18 // 18
extract_uint64
frame_bury 14
frame_dig 7
pushint 26 // 26
extract_uint64
frame_bury 15
frame_dig 7
extract 34 32
frame_bury 16
frame_dig 6
frame_bury 17
intc_0 // 0
frame_bury 18
intc_0 // 0
frame_bury 19
frame_dig 7
intc 4 // 786
getbit
frame_bury 20
bytec 7 // "aura"
box_get
store 65
store 64
load 65
assert
load 64
frame_bury 21
frame_dig 21
intc_0 // 0
extract_uint64
frame_bury 22
frame_dig -2
txnas Accounts
frame_dig 4
==
assert
frame_dig -1
txnas Accounts
frame_dig 6
==
// The passed highest_bidder_account must have the same address as the address of the highest_bidder
assert
frame_dig -4
txnas Assets
frame_dig 22
==
// The passed asset must be aura
assert
frame_dig -5
gtxns XferAsset
frame_dig 8
==
// The asset transferred must be the auctioned asset
assert
frame_dig 4
frame_dig -5
gtxns Sender
==
// Only the auctioneer is allowed to complete an auction
assert
frame_dig -5
gtxns AssetReceiver
frame_dig 6
==
// The asset should be sent to the highest_bidder
assert
frame_dig 8
itob
frame_dig 9
frame_bury 26
frame_dig 26
frame_bury 25
pushint 99 // 99
frame_bury 23
frame_dig 23
frame_dig 26
len
+
frame_bury 24
frame_dig 24
intc_2 // 65536
<
assert
frame_dig 23
itob
extract 6 0
concat
frame_dig 10
frame_bury 26
frame_dig 25
frame_dig 26
concat
frame_bury 25
frame_dig 24
frame_bury 23
frame_dig 23
frame_dig 26
len
+
frame_bury 24
frame_dig 24
intc_2 // 65536
<
assert
frame_dig 23
itob
extract 6 0
concat
frame_dig 11
frame_bury 26
frame_dig 25
frame_dig 26
concat
frame_bury 25
frame_dig 24
frame_bury 23
frame_dig 23
frame_dig 26
len
+
frame_bury 24
frame_dig 24
intc_2 // 65536
<
assert
frame_dig 23
itob
extract 6 0
concat
frame_dig 12
frame_bury 26
frame_dig 25
frame_dig 26
concat
frame_bury 25
frame_dig 24
frame_bury 23
frame_dig 23
frame_dig 26
len
+
frame_bury 24
frame_dig 24
intc_2 // 65536
<
assert
frame_dig 23
itob
extract 6 0
concat
frame_dig 13
frame_bury 26
frame_dig 25
frame_dig 26
concat
frame_bury 25
frame_dig 24
frame_bury 23
frame_dig 23
itob
extract 6 0
concat
frame_dig 14
itob
concat
frame_dig 15
itob
concat
frame_dig 16
concat
frame_dig 17
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 18
setbit
intc_1 // 1
frame_dig 19
setbit
pushint 2 // 2
frame_dig 20
setbit
concat
frame_dig 25
concat
frame_bury 7
frame_dig 2
extract 2 0
box_del
pop
frame_dig 2
extract 2 0
frame_dig 7
box_put
pushbytes 0x5061796d656e7420666f7220796f757220636f6d706c657465642061756374696f6e206f6e3a20 // "Payment for your completed auction on: "
frame_dig 3
extract 2 0
concat
frame_bury 27
frame_dig 27
len
itob
extract 6 0
frame_dig 27
concat
frame_bury 27
frame_dig 5
frame_dig 4
frame_dig 27
callsub paypriceminuscommission_41
frame_dig 5
intc_0 // 0
>
bz completeartauction_17_l2
callsub increaseappnfttransactioncount_21
completeartauction_17_l2:
callsub calculateandupdatereward_28
frame_dig 2
extract 2 0
box_get
store 67
store 66
load 67
assert
load 66
frame_bury 0
retsub

// place_art_on_sale
placeartonsale_18:
proto 3 1
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
dupn 4
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
dupn 4
bytec_0 // ""
dup
frame_dig -3
callsub ensureassetreceiverisapplication_36
frame_dig -2
callsub ensurecanmarketart_37
frame_dig -2
extract 2 0
box_get
store 69
store 68
load 69
assert
load 68
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
frame_dig 1
pushint 8 // 8
extract_uint16
frame_dig 1
intc_3 // 10
extract_uint16
substring3
frame_bury 3
frame_dig 1
frame_dig 1
intc_3 // 10
extract_uint16
frame_dig 1
pushint 12 // 12
extract_uint16
substring3
frame_bury 4
frame_dig 1
frame_dig 1
pushint 12 // 12
extract_uint16
frame_dig 1
pushint 14 // 14
extract_uint16
substring3
frame_bury 5
frame_dig 1
frame_dig 1
pushint 14 // 14
extract_uint16
frame_dig 1
pushint 16 // 16
extract_uint16
substring3
frame_bury 6
frame_dig 1
frame_dig 1
pushint 16 // 16
extract_uint16
dig 1
len
substring3
frame_bury 7
frame_dig 1
pushint 26 // 26
extract_uint64
frame_bury 8
frame_dig 1
extract 34 32
frame_bury 9
frame_dig 1
extract 66 32
frame_bury 10
intc_1 // 1
frame_bury 11
frame_dig 1
intc 7 // 785
getbit
frame_bury 12
frame_dig 1
intc 4 // 786
getbit
frame_bury 13
frame_dig 2
itob
frame_dig 3
frame_bury 17
frame_dig 17
frame_bury 16
pushint 99 // 99
frame_bury 14
frame_dig 14
frame_dig 17
len
+
frame_bury 15
frame_dig 15
intc_2 // 65536
<
assert
frame_dig 14
itob
extract 6 0
concat
frame_dig 4
frame_bury 17
frame_dig 16
frame_dig 17
concat
frame_bury 16
frame_dig 15
frame_bury 14
frame_dig 14
frame_dig 17
len
+
frame_bury 15
frame_dig 15
intc_2 // 65536
<
assert
frame_dig 14
itob
extract 6 0
concat
frame_dig 5
frame_bury 17
frame_dig 16
frame_dig 17
concat
frame_bury 16
frame_dig 15
frame_bury 14
frame_dig 14
frame_dig 17
len
+
frame_bury 15
frame_dig 15
intc_2 // 65536
<
assert
frame_dig 14
itob
extract 6 0
concat
frame_dig 6
frame_bury 17
frame_dig 16
frame_dig 17
concat
frame_bury 16
frame_dig 15
frame_bury 14
frame_dig 14
frame_dig 17
len
+
frame_bury 15
frame_dig 15
intc_2 // 65536
<
assert
frame_dig 14
itob
extract 6 0
concat
frame_dig 7
frame_bury 17
frame_dig 16
frame_dig 17
concat
frame_bury 16
frame_dig 15
frame_bury 14
frame_dig 14
itob
extract 6 0
concat
frame_dig -1
itob
concat
frame_dig 8
itob
concat
frame_dig 9
concat
frame_dig 10
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 11
setbit
intc_1 // 1
frame_dig 12
setbit
pushint 2 // 2
frame_dig 13
setbit
concat
frame_dig 16
concat
frame_bury 1
frame_dig 3
extract 2 0
box_del
pop
frame_dig 3
extract 2 0
frame_dig 1
box_put
frame_dig -3
gtxns XferAsset
frame_dig 2
==
// The asset being transferred is not the same as the specified asset_key
assert
callsub calculateandupdatereward_28
frame_dig 3
extract 2 0
box_get
store 71
store 70
load 71
assert
load 70
frame_bury 0
retsub

// purchase_nft
purchasenft_19:
proto 9 0
intc_0 // 0
dup
bytec_0 // ""
dupn 2
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
dupn 3
intc_0 // 0
dupn 3
bytec_0 // ""
dupn 5
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 4
bytec_0 // ""
dupn 2
intc_0 // 0
bytec_0 // ""
intc_0 // 0
store 72
purchasenft_19_l1:
load 72
intc 5 // 1000
global MinTxnFee
/
<
bnz purchasenft_19_l7
frame_dig -6
callsub ensurevalidnfttype_30
frame_dig -3
callsub ensureassetisaura_31
frame_dig -1
callsub ensuretxnisauraoptin_32
frame_dig -6
extract 2 0
bytec 20 // "sound"
==
bnz purchasenft_19_l6
frame_dig -7
callsub ensureartnftexists_35
frame_dig -7
extract 2 0
box_get
store 76
store 75
load 76
assert
load 75
frame_bury 19
frame_dig 19
frame_dig 19
intc_3 // 10
extract_uint16
frame_dig 19
pushint 12 // 12
extract_uint16
substring3
frame_bury 20
frame_dig 19
frame_dig 19
pushint 12 // 12
extract_uint16
frame_dig 19
pushint 14 // 14
extract_uint16
substring3
frame_bury 3
frame_dig 19
frame_dig 19
pushint 14 // 14
extract_uint16
frame_dig 19
pushint 16 // 16
extract_uint16
substring3
frame_bury 21
frame_dig 19
frame_dig 19
pushint 16 // 16
extract_uint16
dig 1
len
substring3
frame_bury 22
frame_dig 19
pushint 26 // 26
extract_uint64
frame_bury 23
frame_dig 19
extract 34 32
frame_bury 24
intc_0 // 0
frame_bury 25
intc_0 // 0
frame_bury 26
frame_dig 19
intc 4 // 786
getbit
frame_bury 27
frame_dig 19
intc_0 // 0
extract_uint64
frame_bury 0
frame_dig 19
pushint 18 // 18
extract_uint64
frame_bury 1
frame_dig 19
extract 66 32
frame_bury 2
frame_dig 0
itob
frame_dig -7
frame_bury 31
frame_dig 31
frame_bury 30
pushint 99 // 99
frame_bury 28
frame_dig 28
frame_dig 31
len
+
frame_bury 29
frame_dig 29
intc_2 // 65536
<
assert
frame_dig 28
itob
extract 6 0
concat
frame_dig 20
frame_bury 31
frame_dig 30
frame_dig 31
concat
frame_bury 30
frame_dig 29
frame_bury 28
frame_dig 28
frame_dig 31
len
+
frame_bury 29
frame_dig 29
intc_2 // 65536
<
assert
frame_dig 28
itob
extract 6 0
concat
frame_dig 3
frame_bury 31
frame_dig 30
frame_dig 31
concat
frame_bury 30
frame_dig 29
frame_bury 28
frame_dig 28
frame_dig 31
len
+
frame_bury 29
frame_dig 29
intc_2 // 65536
<
assert
frame_dig 28
itob
extract 6 0
concat
frame_dig 21
frame_bury 31
frame_dig 30
frame_dig 31
concat
frame_bury 30
frame_dig 29
frame_bury 28
frame_dig 28
frame_dig 31
len
+
frame_bury 29
frame_dig 29
intc_2 // 65536
<
assert
frame_dig 28
itob
extract 6 0
concat
frame_dig 22
frame_bury 31
frame_dig 30
frame_dig 31
concat
frame_bury 30
frame_dig 29
frame_bury 28
frame_dig 28
itob
extract 6 0
concat
frame_dig 1
itob
concat
frame_dig 23
itob
concat
frame_dig 24
concat
frame_dig 2
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 25
setbit
intc_1 // 1
frame_dig 26
setbit
pushint 2 // 2
frame_dig 27
setbit
concat
frame_dig 30
concat
frame_bury 19
frame_dig -7
extract 2 0
box_del
pop
frame_dig -7
extract 2 0
frame_dig 19
box_put
purchasenft_19_l4:
frame_dig -2
txnas Accounts
frame_dig 2
==
// Ensure seller is nft owner
assert
frame_dig -9
gtxns Amount
frame_dig 1
==
// The payment amount must be equat to the sale price
assert
frame_dig -9
gtxns Receiver
global CurrentApplicationAddress
==
// The payment receiver must be the current_application_address
assert
frame_dig -5
txnas Accounts
frame_dig -9
gtxns Sender
==
// The buyer must be the same as the person make the transaction
assert
frame_dig -9
gtxns Sender
frame_bury 32
frame_dig 32
len
pushint 32 // 32
==
assert
frame_dig -8
gtxns XferAsset
frame_dig 0
==
// The opt-in_txn should be for the asset being purchased
assert
frame_dig -4
txnas Assets
frame_dig 0
==
// The passed asset must be the same a the asset being purchased
assert
intc_1 // 1
frame_bury 33
pushbytes 0x5061796d656e7420666f72207075726368617365206f6620796f75722061737365743a20 // "Payment for purchase of your asset: "
frame_dig 3
extract 2 0
concat
frame_bury 34
frame_dig 34
len
itob
extract 6 0
frame_dig 34
concat
frame_bury 34
frame_dig 1
frame_dig 2
frame_dig 34
callsub paypriceminuscommission_41
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig 0
itxn_field XferAsset
frame_dig -9
gtxns Sender
itxn_field AssetReceiver
pushbytes 0x596f75206173736574207075726368617365 // "You asset purchase"
itxn_field Note
frame_dig 33
itxn_field AssetAmount
itxn_submit
frame_dig 1
intc_0 // 0
>
bz purchasenft_19_l8
callsub increaseappnfttransactioncount_21
b purchasenft_19_l8
purchasenft_19_l6:
frame_dig -7
callsub ensuresoundnftexists_34
frame_dig -7
extract 2 0
box_get
store 74
store 73
load 74
assert
load 73
frame_bury 4
frame_dig 4
intc_0 // 0
extract_uint64
frame_bury 0
frame_dig 4
pushint 36 // 36
extract_uint64
frame_bury 1
frame_dig 4
extract 46 32
frame_bury 2
frame_dig 4
intc_3 // 10
extract_uint64
frame_bury 5
frame_dig 4
frame_dig 4
pushint 18 // 18
extract_uint16
frame_dig 4
pushint 20 // 20
extract_uint16
substring3
frame_bury 3
frame_dig 4
frame_dig 4
pushint 20 // 20
extract_uint16
frame_dig 4
pushint 22 // 22
extract_uint16
substring3
frame_bury 6
frame_dig 4
frame_dig 4
pushint 22 // 22
extract_uint16
frame_dig 4
pushint 32 // 32
extract_uint16
substring3
frame_bury 7
frame_dig 4
pushint 24 // 24
extract_uint64
frame_bury 8
frame_dig 4
frame_dig 4
pushint 32 // 32
extract_uint16
frame_dig 4
pushint 34 // 34
extract_uint16
substring3
frame_bury 9
frame_dig 4
frame_dig 4
pushint 34 // 34
extract_uint16
frame_dig 4
pushint 44 // 44
extract_uint16
substring3
frame_bury 10
frame_dig 4
frame_dig 4
pushint 44 // 44
extract_uint16
dig 1
len
substring3
frame_bury 11
frame_dig 4
extract 46 32
frame_bury 12
frame_dig 4
pushint 624 // 624
getbit
frame_bury 13
frame_dig 4
pushint 625 // 625
getbit
frame_bury 14
frame_dig 5
intc_0 // 0
>
// The supply is exhausted
assert
frame_dig 5
intc_1 // 1
-
frame_bury 5
frame_dig 0
itob
frame_dig -7
frame_bury 18
frame_dig 18
frame_bury 17
pushint 79 // 79
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 5
itob
concat
frame_dig 3
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 6
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 7
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 8
itob
concat
frame_dig 9
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 10
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
frame_dig 18
len
+
frame_bury 16
frame_dig 16
intc_2 // 65536
<
assert
frame_dig 15
itob
extract 6 0
concat
frame_dig 1
itob
concat
frame_dig 11
frame_bury 18
frame_dig 17
frame_dig 18
concat
frame_bury 17
frame_dig 16
frame_bury 15
frame_dig 15
itob
extract 6 0
concat
frame_dig 12
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 13
setbit
intc_1 // 1
frame_dig 14
setbit
concat
frame_dig 17
concat
frame_bury 4
frame_dig -7
extract 2 0
box_del
pop
frame_dig -7
extract 2 0
frame_dig 4
box_put
b purchasenft_19_l4
purchasenft_19_l7:
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec 4 // 0x068101
itxn_field ApprovalProgram
bytec 4 // 0x068101
itxn_field ClearStateProgram
itxn_submit
load 72
intc_1 // 1
+
store 72
b purchasenft_19_l1
purchasenft_19_l8:
callsub calculateandupdatereward_28
frame_dig 32
callsub rewardwithauratokens_38
retsub

// bootstrap_token
bootstraptoken_20:
proto 4 0
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -4
extract 2 0
box_len
store 11
store 10
load 11
!
// Aura tokens already exist
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
frame_dig -3
itxn_field ConfigAssetTotal
frame_dig -4
extract 2 0
itxn_field ConfigAssetName
frame_dig -2
extract 2 0
itxn_field ConfigAssetUnitName
frame_dig -1
extract 2 0
itxn_field ConfigAssetURL
pushint 6 // 6
itxn_field ConfigAssetDecimals
pushbytes 0xb16164a8448b4c255579d1baa714031c8edc47fac09c7d446f066bc25eace020 // 0xb16164a8448b4c255579d1baa714031c8edc47fac09c7d446f066bc25eace020
itxn_field ConfigAssetMetadataHash
global CurrentApplicationAddress
itxn_field ConfigAssetFreeze
global CurrentApplicationAddress
itxn_field ConfigAssetManager
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
global CurrentApplicationAddress
itxn_field ConfigAssetClawback
itxn_submit
itxn CreatedAssetID
frame_bury 0
frame_dig 0
itob
frame_dig -4
frame_bury 5
frame_dig 5
frame_bury 4
pushint 18 // 18
frame_bury 2
frame_dig 2
itob
extract 6 0
concat
frame_dig -3
itob
concat
frame_dig 4
concat
frame_bury 1
frame_dig -4
extract 2 0
box_del
pop
frame_dig -4
extract 2 0
frame_dig 1
box_put
retsub

// increase_app_nft_transaction_count
increaseappnfttransactioncount_21:
proto 0 0
bytec 5 // "epoch_nft_transactions"
bytec 5 // "epoch_nft_transactions"
app_global_get
intc_1 // 1
+
app_global_put
bytec 8 // "total_nft_transactions"
bytec 8 // "total_nft_transactions"
app_global_get
intc_1 // 1
+
app_global_put
retsub

// create_nft_owner
createnftowner_22:
proto 1 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
frame_dig -1
gtxns Sender
itxn_field ConfigAssetName
global CurrentApplicationAddress
itxn_field ConfigAssetManager
intc_1 // 1
itxn_field ConfigAssetTotal
itxn_submit
frame_dig -1
gtxns Sender
frame_bury 0
frame_dig 0
len
pushint 32 // 32
==
assert
itxn CreatedAssetID
frame_bury 1
intc_0 // 0
frame_bury 2
frame_dig 0
frame_dig 2
itob
concat
frame_dig 1
itob
concat
frame_bury 3
frame_dig -1
gtxns Sender
box_del
pop
frame_dig -1
gtxns Sender
frame_dig 3
box_put
retsub

// increment_creator_nft_count
incrementcreatornftcount_23:
proto 1 0
bytec_0 // ""
intc_0 // 0
dupn 3
bytec_0 // ""
dup
frame_dig -1
box_get
store 24
store 23
load 24
assert
load 23
frame_bury 0
frame_dig 0
pushint 32 // 32
extract_uint64
frame_bury 1
frame_dig 0
pushint 40 // 40
extract_uint64
frame_bury 2
frame_dig 1
intc_1 // 1
+
frame_bury 1
frame_dig -1
frame_dig 1
itob
concat
frame_dig 2
itob
concat
frame_bury 0
frame_dig -1
box_del
pop
frame_dig -1
frame_dig 0
box_put
retsub

// new_art_auction
newartauction_24:
proto 8 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
frame_dig -7
extract 2 0
box_len
store 45
store 44
load 45
!
// an art auction with this key already exists
assert
frame_dig -8
gtxns Sender
frame_bury 0
frame_dig 0
len
pushint 32 // 32
==
assert
intc_0 // 0
frame_bury 1
global CurrentApplicationAddress
frame_bury 2
frame_dig 2
len
pushint 32 // 32
==
assert
intc_0 // 0
frame_bury 3
frame_dig -7
frame_bury 8
frame_dig 8
frame_bury 7
pushint 105 // 105
frame_bury 5
frame_dig 5
frame_dig 8
len
+
frame_bury 6
frame_dig 6
intc_2 // 65536
<
assert
frame_dig 5
itob
extract 6 0
frame_dig 0
concat
frame_dig -6
frame_bury 8
frame_dig 7
frame_dig 8
concat
frame_bury 7
frame_dig 6
frame_bury 5
frame_dig 5
frame_dig 8
len
+
frame_bury 6
frame_dig 6
intc_2 // 65536
<
assert
frame_dig 5
itob
extract 6 0
concat
frame_dig -5
frame_bury 8
frame_dig 7
frame_dig 8
concat
frame_bury 7
frame_dig 6
frame_bury 5
frame_dig 5
frame_dig 8
len
+
frame_bury 6
frame_dig 6
intc_2 // 65536
<
assert
frame_dig 5
itob
extract 6 0
concat
frame_dig -3
itob
concat
frame_dig -2
itob
concat
frame_dig -1
itob
concat
frame_dig -4
frame_bury 8
frame_dig 7
frame_dig 8
concat
frame_bury 7
frame_dig 6
frame_bury 5
frame_dig 5
itob
extract 6 0
concat
frame_dig 1
itob
concat
frame_dig 2
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 3
setbit
concat
frame_dig 7
concat
frame_bury 4
frame_dig -7
extract 2 0
box_del
pop
frame_dig -7
extract 2 0
frame_dig 4
box_put
retsub

// record_auction_bid
recordauctionbid_25:
proto 2 0
bytec_0 // ""
dupn 4
intc_0 // 0
dupn 3
bytec_0 // ""
intc_0 // 0
dupn 2
bytec_0 // ""
dup
frame_dig -1
extract 2 0
box_get
store 57
store 56
load 57
assert
load 56
frame_bury 0
frame_dig 0
extract 2 32
frame_bury 1
frame_dig 0
frame_dig 0
pushint 34 // 34
extract_uint16
frame_dig 0
pushint 36 // 36
extract_uint16
substring3
frame_bury 2
frame_dig 0
frame_dig 0
pushint 36 // 36
extract_uint16
frame_dig 0
pushint 62 // 62
extract_uint16
substring3
frame_bury 3
frame_dig -2
gtxns Sender
frame_bury 4
frame_dig 4
len
pushint 32 // 32
==
assert
frame_dig 0
pushint 64 // 64
extract_uint64
frame_bury 5
frame_dig 0
pushint 38 // 38
extract_uint64
frame_bury 6
frame_dig 0
pushint 46 // 46
extract_uint64
frame_bury 7
frame_dig 0
pushint 54 // 54
extract_uint64
frame_bury 8
frame_dig 0
frame_dig 0
pushint 62 // 62
extract_uint16
dig 1
len
substring3
frame_bury 9
frame_dig 0
pushint 832 // 832
getbit
frame_bury 10
frame_dig -2
gtxns Amount
frame_dig 5
>
// The new bid must be larger than the current highest bid
assert
frame_dig -2
gtxns Amount
frame_dig 6
>
// The new bid must be greater that the minimum bid price
assert
frame_dig -2
gtxns Amount
frame_bury 5
frame_dig -1
frame_bury 14
frame_dig 14
frame_bury 13
pushint 105 // 105
frame_bury 11
frame_dig 11
frame_dig 14
len
+
frame_bury 12
frame_dig 12
intc_2 // 65536
<
assert
frame_dig 11
itob
extract 6 0
frame_dig 1
concat
frame_dig 2
frame_bury 14
frame_dig 13
frame_dig 14
concat
frame_bury 13
frame_dig 12
frame_bury 11
frame_dig 11
frame_dig 14
len
+
frame_bury 12
frame_dig 12
intc_2 // 65536
<
assert
frame_dig 11
itob
extract 6 0
concat
frame_dig 3
frame_bury 14
frame_dig 13
frame_dig 14
concat
frame_bury 13
frame_dig 12
frame_bury 11
frame_dig 11
frame_dig 14
len
+
frame_bury 12
frame_dig 12
intc_2 // 65536
<
assert
frame_dig 11
itob
extract 6 0
concat
frame_dig 6
itob
concat
frame_dig 7
itob
concat
frame_dig 8
itob
concat
frame_dig 9
frame_bury 14
frame_dig 13
frame_dig 14
concat
frame_bury 13
frame_dig 12
frame_bury 11
frame_dig 11
itob
extract 6 0
concat
frame_dig 5
itob
concat
frame_dig 4
concat
bytec_1 // 0x00
intc_0 // 0
frame_dig 10
setbit
concat
frame_dig 13
concat
frame_bury 0
frame_dig -1
extract 2 0
box_del
pop
frame_dig -1
extract 2 0
frame_dig 0
box_put
retsub

// calculate_and_update_network_difficulty
calculateandupdatenetworkdifficulty_26:
proto 0 0
intc_0 // 0
dupn 5
bytec 17 // "min_difficulty"
app_global_get
frame_bury 2
bytec 5 // "epoch_nft_transactions"
app_global_get
frame_bury 3
bytec 12 // "epoch_target_transaction"
app_global_get
frame_bury 4
bytec 6 // "network_difficulty"
app_global_get
frame_bury 5
frame_dig 3
frame_dig 4
>
bnz calculateandupdatenetworkdifficulty_26_l5
frame_dig 4
frame_dig 3
-
frame_bury 0
intc_1 // 1
frame_dig 0
frame_dig 4
/
-
frame_dig 5
*
frame_bury 1
calculateandupdatenetworkdifficulty_26_l2:
frame_dig 1
frame_dig 2
>
bnz calculateandupdatenetworkdifficulty_26_l4
bytec 6 // "network_difficulty"
frame_dig 2
app_global_put
b calculateandupdatenetworkdifficulty_26_l6
calculateandupdatenetworkdifficulty_26_l4:
bytec 6 // "network_difficulty"
frame_dig 1
app_global_put
b calculateandupdatenetworkdifficulty_26_l6
calculateandupdatenetworkdifficulty_26_l5:
frame_dig 3
frame_dig 4
-
frame_bury 0
intc_1 // 1
frame_dig 0
frame_dig 4
/
+
frame_dig 5
*
frame_bury 1
b calculateandupdatenetworkdifficulty_26_l2
calculateandupdatenetworkdifficulty_26_l6:
bytec 5 // "epoch_nft_transactions"
intc_0 // 0
app_global_put
retsub

// calculate_and_update_base_reward
calculateandupdatebasereward_27:
proto 0 0
intc_0 // 0
dupn 2
bytec 18 // "rewardable_tokens_supply"
app_global_get
frame_bury 1
bytec 19 // "total_target_nft_sales"
app_global_get
frame_bury 2
frame_dig 1
frame_dig 2
/
frame_bury 0
bytec 9 // "aura_base_reward"
frame_dig 0
app_global_put
retsub

// calculate_and_update_reward
calculateandupdatereward_28:
proto 0 0
intc_0 // 0
dupn 2
callsub calculateandupdatenetworkdifficulty_26
callsub calculateandupdatebasereward_27
bytec 9 // "aura_base_reward"
app_global_get
frame_bury 0
bytec 6 // "network_difficulty"
app_global_get
frame_bury 1
frame_dig 0
frame_dig 1
/
frame_bury 2
frame_dig 2
intc_0 // 0
>
bnz calculateandupdatereward_28_l2
bytec_3 // "aura_reward"
bytec 16 // "min_aural_reward"
app_global_get
app_global_put
b calculateandupdatereward_28_l3
calculateandupdatereward_28_l2:
bytec_3 // "aura_reward"
frame_dig 2
app_global_put
calculateandupdatereward_28_l3:
retsub

// ensure_sender_is_registered_creative
ensuresenderisregisteredcreative_29:
proto 1 0
frame_dig -1
gtxns Sender
box_len
store 26
store 25
load 26
// Sender is not a registered creative
assert
retsub

// ensure_valid_nft_type
ensurevalidnfttype_30:
proto 1 0
frame_dig -1
extract 2 0
pushbytes 0x617274 // "art"
==
frame_dig -1
extract 2 0
bytec 20 // "sound"
==
||
// asset_type can only be `art` or `sound`
assert
retsub

// ensure_asset_is_aura
ensureassetisaura_31:
proto 1 0
bytec_0 // ""
intc_0 // 0
bytec 7 // "aura"
box_get
store 3
store 2
load 3
assert
load 2
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig -1
txnas Assets
frame_dig 1
==
// The asset is not an aura token
assert
retsub

// ensure_txn_is_aura_optin
ensuretxnisauraoptin_32:
proto 1 0
bytec_0 // ""
intc_0 // 0
bytec 7 // "aura"
box_get
store 78
store 77
load 78
assert
load 77
frame_bury 0
frame_dig 0
intc_0 // 0
extract_uint64
frame_bury 1
frame_dig -1
gtxns XferAsset
frame_dig 1
==
// The txn is not an aura optin Transaction
assert
retsub

// ensure_art_auction_exists
ensureartauctionexists_33:
proto 1 0
frame_dig -1
extract 2 0
box_len
store 59
store 58
load 59
// art auction with the specified key does not exist
assert
retsub

// ensure_sound_nft_exists
ensuresoundnftexists_34:
proto 1 0
frame_dig -1
extract 2 0
box_len
store 80
store 79
load 80
// SoundNFT with the specified asset_key does not exist
assert
retsub

// ensure_art_nft_exists
ensureartnftexists_35:
proto 1 0
frame_dig -1
extract 2 0
box_len
store 37
store 36
load 37
// ArtNFT with the specified asset_key does not exist
assert
retsub

// ensure_asset_receiver_is_application
ensureassetreceiverisapplication_36:
proto 1 0
frame_dig -1
gtxns AssetReceiver
global CurrentApplicationAddress
==
// The asset_receiver must be the current_application_address
assert
retsub

// ensure_can_market_art
ensurecanmarketart_37:
proto 1 0
bytec_0 // ""
intc_0 // 0
dup
frame_dig -1
callsub ensureartnftexists_35
frame_dig -1
extract 2 0
box_get
store 47
store 46
load 47
assert
load 46
frame_bury 0
frame_dig 0
intc 6 // 784
getbit
frame_bury 1
frame_dig 0
intc 7 // 785
getbit
frame_bury 2
frame_dig 1
!
// ArtNFT is already on sale
assert
frame_dig 2
!
// ArtNFT is already on auction
assert
retsub

// reward_with_aura_tokens
rewardwithauratokens_38:
proto 1 0
bytec_0 // ""
dup
intc_0 // 0
dup
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
dup
bytec 15 // 0x000461757261
frame_bury 0
frame_dig 0
extract 2 0
box_get
store 5
store 4
load 5
assert
load 4
frame_bury 1
frame_dig 1
intc_0 // 0
extract_uint64
frame_bury 2
frame_dig 1
intc_3 // 10
extract_uint64
frame_bury 3
pushbytes 0x0000 // 0x0000
frame_bury 4
frame_dig 3
bytec_3 // "aura_reward"
app_global_get
>
bnz rewardwithauratokens_38_l2
pushbytes 0x001b4e6f206d6f7265207472616e73616374696f6e2072657761726473 // 0x001b4e6f206d6f7265207472616e73616374696f6e2072657761726473
frame_bury 4
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig 2
itxn_field XferAsset
frame_dig -1
itxn_field AssetReceiver
intc_0 // 0
itxn_field AssetAmount
frame_dig 4
extract 2 0
itxn_field Note
itxn_submit
b rewardwithauratokens_38_l3
rewardwithauratokens_38_l2:
pushbytes 0x0017596f7572205472616e73616374696f6e20526577617264 // 0x0017596f7572205472616e73616374696f6e20526577617264
frame_bury 4
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig 2
itxn_field XferAsset
frame_dig -1
itxn_field AssetReceiver
bytec_3 // "aura_reward"
app_global_get
itxn_field AssetAmount
frame_dig 4
extract 2 0
itxn_field Note
itxn_submit
rewardwithauratokens_38_l3:
frame_dig 3
bytec_3 // "aura_reward"
app_global_get
-
frame_bury 3
frame_dig 2
itob
frame_dig 0
frame_bury 8
frame_dig 8
frame_bury 7
pushint 18 // 18
frame_bury 5
frame_dig 5
itob
extract 6 0
concat
frame_dig 3
itob
concat
frame_dig 7
concat
frame_bury 1
frame_dig 0
extract 2 0
box_del
pop
frame_dig 0
extract 2 0
frame_dig 1
box_put
retsub

// transfer_asset_from_contract
transferassetfromcontract_39:
proto 3 0
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig -3
itxn_field XferAsset
frame_dig -2
itxn_field AssetAmount
frame_dig -1
itxn_field AssetReceiver
itxn_submit
retsub

// refund_last_bidder
refundlastbidder_40:
proto 3 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -2
itxn_field Amount
frame_dig -3
txnas Accounts
itxn_field Receiver
frame_dig -1
extract 2 0
itxn_field Note
itxn_submit
retsub

// pay_price_minus_commission
paypriceminuscommission_41:
proto 3 0
intc_0 // 0
frame_dig -3
bytec 13 // "min_charge_price"
app_global_get
<=
bnz paypriceminuscommission_41_l2
frame_dig -3
pushint 100 // 100
bytec 10 // "commission_percentage"
app_global_get
-
*
pushint 100 // 100
/
frame_bury 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig 0
itxn_field Amount
frame_dig -2
itxn_field Receiver
frame_dig -1
extract 2 0
itxn_field Note
itxn_submit
b paypriceminuscommission_41_l3
paypriceminuscommission_41_l2:
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -3
itxn_field Amount
frame_dig -2
itxn_field Receiver
frame_dig -1
extract 2 0
itxn_field Note
itxn_submit
paypriceminuscommission_41_l3:
retsub

// update_caster
updatecaster_42:
proto 0 0
callsub update_1
retsub

// promote_to_admin_caster
promotetoadmincaster_43:
proto 0 0
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 0
frame_dig 0
callsub promotetoadmin_2
retsub

// reward_with_aura_tokens_caster
rewardwithauratokenscaster_44:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 1
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 2
txn GroupIndex
intc_1 // 1
-
frame_bury 0
frame_dig 0
frame_dig 1
frame_dig 2
callsub rewardwithauratokens_3
retsub

// update_commission_percentage_caster
updatecommissionpercentagecaster_45:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub updatecommissionpercentage_4
retsub

// update_aura_rewards_caster
updateaurarewardscaster_46:
proto 0 0
callsub updateaurarewards_5
retsub

// update_target_nft_transactions_caster
updatetargetnfttransactionscaster_47:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub updatetargetnfttransactions_6
retsub

// withdraw_profits_caster
withdrawprofitscaster_48:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 1
frame_dig 0
frame_dig 1
callsub withdrawprofits_7
retsub

// update_min_charge_price_caster
updateminchargepricecaster_49:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub updateminchargeprice_8
retsub

// create_aura_tokens_caster
createauratokenscaster_50:
proto 0 0
bytec_0 // ""
callsub createauratokens_9
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// transfer_auras_caster
transferaurascaster_51:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 2
frame_dig 0
frame_dig 1
frame_dig 2
callsub transferauras_10
retsub

// register_creator_caster
registercreatorcaster_52:
proto 0 0
bytec_0 // ""
intc_0 // 0
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
callsub registercreator_11
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// create_sound_nft_caster
createsoundnftcaster_53:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
dupn 4
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dupn 2
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
frame_bury 3
txna ApplicationArgs 3
frame_bury 4
txna ApplicationArgs 4
frame_bury 5
txna ApplicationArgs 5
frame_bury 6
txna ApplicationArgs 6
btoi
frame_bury 7
txna ApplicationArgs 7
frame_bury 8
txna ApplicationArgs 8
frame_bury 9
txna ApplicationArgs 9
btoi
frame_bury 10
txna ApplicationArgs 10
frame_bury 11
txna ApplicationArgs 11
btoi
frame_bury 12
txna ApplicationArgs 12
intc_0 // 0
getbyte
frame_bury 13
txna ApplicationArgs 13
intc_0 // 0
getbyte
frame_bury 14
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
frame_dig 8
frame_dig 9
frame_dig 10
frame_dig 11
frame_dig 12
frame_dig 13
frame_dig 14
callsub createsoundnft_12
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// create_art_nft_caster
createartnftcaster_54:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
dupn 5
intc_0 // 0
dupn 2
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
frame_bury 3
txna ApplicationArgs 3
frame_bury 4
txna ApplicationArgs 4
frame_bury 5
txna ApplicationArgs 5
frame_bury 6
txna ApplicationArgs 6
frame_bury 7
txna ApplicationArgs 7
btoi
frame_bury 8
txna ApplicationArgs 8
intc_0 // 0
getbyte
frame_bury 9
txna ApplicationArgs 9
intc_0 // 0
getbyte
frame_bury 10
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
frame_dig 8
frame_dig 9
frame_dig 10
callsub createartnft_13
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// claim_created_art_caster
claimcreatedartcaster_55:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
dup
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 3
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 4
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub claimcreatedart_14
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// create_art_auction_caster
createartauctioncaster_56:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
dup
intc_0 // 0
dupn 2
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
frame_bury 3
txna ApplicationArgs 3
btoi
frame_bury 4
txna ApplicationArgs 4
btoi
frame_bury 5
txna ApplicationArgs 5
btoi
frame_bury 6
txna ApplicationArgs 6
frame_bury 7
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
intc_1 // pay
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
callsub createartauction_15
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// bid_on_art_auction_caster
bidonartauctioncaster_57:
proto 0 0
bytec_0 // ""
dup
intc_0 // 0
dupn 3
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 3
txn GroupIndex
pushint 3 // 3
-
frame_bury 2
frame_dig 2
gtxns TypeEnum
intc_1 // pay
==
assert
txn GroupIndex
pushint 2 // 2
-
frame_bury 4
frame_dig 4
gtxns TypeEnum
pushint 4 // axfer
==
assert
txn GroupIndex
intc_1 // 1
-
frame_bury 5
frame_dig 5
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
callsub bidonartauction_16
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// complete_art_auction_caster
completeartauctioncaster_58:
proto 0 0
bytec_0 // ""
intc_0 // 0
dup
bytec_0 // ""
intc_0 // 0
dup
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 2
txna ApplicationArgs 2
frame_bury 3
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 4
txna ApplicationArgs 4
intc_0 // 0
getbyte
frame_bury 5
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
callsub completeartauction_17
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// place_art_on_sale_caster
placeartonsalecaster_59:
proto 0 0
bytec_0 // ""
intc_0 // 0
bytec_0 // ""
intc_0 // 0
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
btoi
frame_bury 3
txn GroupIndex
intc_1 // 1
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 1
frame_dig 2
frame_dig 3
callsub placeartonsale_18
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// purchase_nft_caster
purchasenftcaster_60:
proto 0 0
intc_0 // 0
dup
bytec_0 // ""
dup
intc_0 // 0
dupn 4
txna ApplicationArgs 1
frame_bury 2
txna ApplicationArgs 2
frame_bury 3
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 4
txna ApplicationArgs 4
intc_0 // 0
getbyte
frame_bury 5
txna ApplicationArgs 5
intc_0 // 0
getbyte
frame_bury 6
txna ApplicationArgs 6
intc_0 // 0
getbyte
frame_bury 7
txn GroupIndex
pushint 3 // 3
-
frame_bury 0
frame_dig 0
gtxns TypeEnum
intc_1 // pay
==
assert
txn GroupIndex
pushint 2 // 2
-
frame_bury 1
frame_dig 1
gtxns TypeEnum
pushint 4 // axfer
==
assert
txn GroupIndex
intc_1 // 1
-
frame_bury 8
frame_dig 8
gtxns TypeEnum
pushint 4 // axfer
==
assert
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
frame_dig 8
callsub purchasenft_19
retsub