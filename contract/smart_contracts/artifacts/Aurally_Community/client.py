# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "promote_to_admin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "demote_from_admin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_aura_token(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_proposal(pay,string,string,string,uint64)(string,uint64,string,string,uint64,uint64,uint64,bool)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "key",
                            "string"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "details",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "end_date",
                            "uint64"
                        ],
                        [
                            "ended",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote_on_proposal(pay,account,bool,asset,asset,string)(string,uint64,string,string,uint64,uint64,uint64,bool)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "key",
                            "string"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "details",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "end_date",
                            "uint64"
                        ],
                        [
                            "ended",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close_proposal(pay,string)(string,uint64,string,string,uint64,uint64,uint64,bool)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "key",
                            "string"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "details",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "end_date",
                            "uint64"
                        ],
                        [
                            "ended",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "aura_index": {
                    "type": "uint64",
                    "key": "aura_index",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Aurally_Community",
        "methods": [
            {
                "name": "promote_to_admin",
                "args": [
                    {
                        "type": "account",
                        "name": "acc"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "demote_from_admin",
                "args": [
                    {
                        "type": "account",
                        "name": "acc"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_aura_token",
                "args": [
                    {
                        "type": "asset",
                        "name": "aura"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    },
                    {
                        "type": "string",
                        "name": "proposal_detail"
                    },
                    {
                        "type": "uint64",
                        "name": "end_date"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,string,string,uint64,uint64,uint64,bool)"
                }
            },
            {
                "name": "vote_on_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "account",
                        "name": "voter"
                    },
                    {
                        "type": "bool",
                        "name": "vote_for"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "asset",
                        "name": "proposal_asset"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,string,string,uint64,uint64,uint64,bool)"
                }
            },
            {
                "name": "close_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,string,string,uint64,uint64,uint64,bool)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class PromoteToAdminArgs(_ArgsBase[None]):
    acc: str | bytes

    @staticmethod
    def method() -> str:
        return "promote_to_admin(account)void"


@dataclasses.dataclass(kw_only=True)
class DemoteFromAdminArgs(_ArgsBase[None]):
    acc: str | bytes

    @staticmethod
    def method() -> str:
        return "demote_from_admin(account)void"


@dataclasses.dataclass(kw_only=True)
class SetAuraTokenArgs(_ArgsBase[None]):
    aura: int

    @staticmethod
    def method() -> str:
        return "set_aura_token(asset)void"


@dataclasses.dataclass(kw_only=True)
class Proposal:
    key: str
    asset_id: int
    title: str
    details: str
    yes_votes: int
    no_votes: int
    end_date: int
    ended: bool


@dataclasses.dataclass(kw_only=True)
class CreateProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    title: str
    proposal_key: str
    proposal_detail: str
    end_date: int

    @staticmethod
    def method() -> str:
        return "create_proposal(pay,string,string,string,uint64)(string,uint64,string,string,uint64,uint64,uint64,bool)"


@dataclasses.dataclass(kw_only=True)
class VoteOnProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    voter: str | bytes
    vote_for: bool
    aura: int
    proposal_asset: int
    proposal_key: str

    @staticmethod
    def method() -> str:
        return "vote_on_proposal(pay,account,bool,asset,asset,string)(string,uint64,string,string,uint64,uint64,uint64,bool)"


@dataclasses.dataclass(kw_only=True)
class CloseProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    proposal_key: str

    @staticmethod
    def method() -> str:
        return "close_proposal(pay,string)(string,uint64,string,string,uint64,uint64,uint64,bool)"


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.aura_index = typing.cast(int, data.get(b"aura_index"))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self) -> SimulateAtomicTransactionResponse:
        result = self.atc.simulate(self.app_client.algod_client)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def promote_to_admin(
        self,
        *,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `promote_to_admin(account)void` ABI method
        
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PromoteToAdminArgs(
            acc=acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def demote_from_admin(
        self,
        *,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `demote_from_admin(account)void` ABI method
        
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DemoteFromAdminArgs(
            acc=acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_aura_token(
        self,
        *,
        aura: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_aura_token(asset)void` ABI method
        
        :param int aura: The `aura` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetAuraTokenArgs(
            aura=aura,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        title: str,
        proposal_key: str,
        proposal_detail: str,
        end_date: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_proposal(pay,string,string,string,uint64)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str title: The `title` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param int end_date: The `end_date` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateProposalArgs(
            txn=txn,
            title=title,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
            end_date=end_date,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        voter: str | bytes,
        vote_for: bool,
        aura: int,
        proposal_asset: int,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `vote_on_proposal(pay,account,bool,asset,asset,string)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes voter: The `voter` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param int proposal_asset: The `proposal_asset` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteOnProposalArgs(
            txn=txn,
            voter=voter,
            vote_for=vote_for,
            aura=aura,
            proposal_asset=proposal_asset,
            proposal_key=proposal_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def close_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `close_proposal(pay,string)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CloseProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class AurallyCommunityClient:
    """A class for interacting with the Aurally_Community app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        AurallyCommunityClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def promote_to_admin(
        self,
        *,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `promote_to_admin(account)void` ABI method
        
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PromoteToAdminArgs(
            acc=acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def demote_from_admin(
        self,
        *,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `demote_from_admin(account)void` ABI method
        
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DemoteFromAdminArgs(
            acc=acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_aura_token(
        self,
        *,
        aura: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_aura_token(asset)void` ABI method
        
        :param int aura: The `aura` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetAuraTokenArgs(
            aura=aura,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        title: str,
        proposal_key: str,
        proposal_detail: str,
        end_date: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `create_proposal(pay,string,string,string,uint64)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str title: The `title` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param int end_date: The `end_date` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = CreateProposalArgs(
            txn=txn,
            title=title,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
            end_date=end_date,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        voter: str | bytes,
        vote_for: bool,
        aura: int,
        proposal_asset: int,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `vote_on_proposal(pay,account,bool,asset,asset,string)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes voter: The `voter` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param int proposal_asset: The `proposal_asset` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = VoteOnProposalArgs(
            txn=txn,
            voter=voter,
            vote_for=vote_for,
            aura=aura,
            proposal_asset=proposal_asset,
            proposal_key=proposal_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def close_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `close_proposal(pay,string)(string,uint64,string,string,uint64,uint64,uint64,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = CloseProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
